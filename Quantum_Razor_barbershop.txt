
======================================================================
File: .gitignore
Path: C:\python\django\HomeWorcks\Barbershop\.gitignore
======================================================================

.venv
.env
**/__pycache__/
db.sqlite3
/media/
*.pyc

======================================================================
File: arguments.txt
Path: C:\python\django\HomeWorcks\Barbershop\arguments.txt
======================================================================

Индексы в модели заказа я сделал такими:

1. Индекс по имени клиента так как по имени будет часто осуществляться поиск заказа
2. Индекс по номеру телефона так как по нему тоже будет часто осуществляться поиск заказа
3. Индекс по комментарию так как по нему тоже будет часто осуществляться поиск заказа.
все 3 выше перечисленные индексы считаю нужными так как в форме поиска есть озможность искать по 1 из них, что по моему мнению будет осуществляться часто.
4. Составной индекс по имени клиента и номеру телефона так как по ним будет часто осуществляться поиск заказа
5. Составной индекс по имени клиента и комментарию так как по ним будет часто осуществляться поиск заказа
Данные составные индексы считаю нужными так как по этим сочетаниям будет больше всего запросов.
Так же я добавил индексы в модель мастера на поле "first_name" так как имя мастера будет часто использоваться на сайте, в модель услуг на поле "name" так как название услуги будет часто использоваться на сайте а так же в модель отзыва на поле "client_name" так как отзывы отображаются на главной странице.

======================================================================
File: manage.py
Path: C:\python\django\HomeWorcks\Barbershop\manage.py
======================================================================

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Quantum_Razor_barbershop.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


======================================================================
File: poetry.lock
Path: C:\python\django\HomeWorcks\Barbershop\poetry.lock
======================================================================

# This file is automatically @generated by Poetry 2.1.1 and should not be changed by hand.

[[package]]
name = "asgiref"
version = "3.8.1"
description = "ASGI specs, helper code, and adapters"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "asgiref-3.8.1-py3-none-any.whl", hash = "sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47"},
    {file = "asgiref-3.8.1.tar.gz", hash = "sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590"},
]

[package.extras]
tests = ["mypy (>=0.800)", "pytest", "pytest-asyncio"]

[[package]]
name = "django"
version = "5.1.7"
description = "A high-level Python web framework that encourages rapid development and clean, pragmatic design."
optional = false
python-versions = ">=3.10"
groups = ["main"]
files = [
    {file = "Django-5.1.7-py3-none-any.whl", hash = "sha256:1323617cb624add820cb9611cdcc788312d250824f92ca6048fda8625514af2b"},
    {file = "Django-5.1.7.tar.gz", hash = "sha256:30de4ee43a98e5d3da36a9002f287ff400b43ca51791920bfb35f6917bfe041c"},
]

[package.dependencies]
asgiref = ">=3.8.1,<4"
sqlparse = ">=0.3.1"
tzdata = {version = "*", markers = "sys_platform == \"win32\""}

[package.extras]
argon2 = ["argon2-cffi (>=19.1.0)"]
bcrypt = ["bcrypt"]

[[package]]
name = "django-extensions"
version = "4.1"
description = "Extensions for Django"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "django_extensions-4.1-py3-none-any.whl", hash = "sha256:0699a7af28f2523bf8db309a80278519362cd4b6e1fd0a8cd4bf063e1e023336"},
    {file = "django_extensions-4.1.tar.gz", hash = "sha256:7b70a4d28e9b840f44694e3f7feb54f55d495f8b3fa6c5c0e5e12bcb2aa3cdeb"},
]

[package.dependencies]
django = ">=4.2"

[[package]]
name = "markdown"
version = "3.7"
description = "Python implementation of John Gruber's Markdown."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "Markdown-3.7-py3-none-any.whl", hash = "sha256:7eb6df5690b81a1d7942992c97fad2938e956e79df20cbc6186e9c3a77b1c803"},
    {file = "markdown-3.7.tar.gz", hash = "sha256:2ae2471477cfd02dbbf038d5d9bc226d40def84b4fe2986e49b59b6b472bbed2"},
]

[package.extras]
docs = ["mdx-gh-links (>=0.2)", "mkdocs (>=1.5)", "mkdocs-gen-files", "mkdocs-literate-nav", "mkdocs-nature (>=0.6)", "mkdocs-section-index", "mkdocstrings[python]"]
testing = ["coverage", "pyyaml"]

[[package]]
name = "pillow"
version = "11.2.1"
description = "Python Imaging Library (Fork)"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "pillow-11.2.1-cp310-cp310-macosx_10_10_x86_64.whl", hash = "sha256:d57a75d53922fc20c165016a20d9c44f73305e67c351bbc60d1adaf662e74047"},
    {file = "pillow-11.2.1-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:127bf6ac4a5b58b3d32fc8289656f77f80567d65660bc46f72c0d77e6600cc95"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b4ba4be812c7a40280629e55ae0b14a0aafa150dd6451297562e1764808bbe61"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c8bd62331e5032bc396a93609982a9ab6b411c05078a52f5fe3cc59234a3abd1"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_28_aarch64.whl", hash = "sha256:562d11134c97a62fe3af29581f083033179f7ff435f78392565a1ad2d1c2c45c"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_28_x86_64.whl", hash = "sha256:c97209e85b5be259994eb5b69ff50c5d20cca0f458ef9abd835e262d9d88b39d"},
    {file = "pillow-11.2.1-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:0c3e6d0f59171dfa2e25d7116217543310908dfa2770aa64b8f87605f8cacc97"},
    {file = "pillow-11.2.1-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:cc1c3bc53befb6096b84165956e886b1729634a799e9d6329a0c512ab651e579"},
    {file = "pillow-11.2.1-cp310-cp310-win32.whl", hash = "sha256:312c77b7f07ab2139924d2639860e084ec2a13e72af54d4f08ac843a5fc9c79d"},
    {file = "pillow-11.2.1-cp310-cp310-win_amd64.whl", hash = "sha256:9bc7ae48b8057a611e5fe9f853baa88093b9a76303937449397899385da06fad"},
    {file = "pillow-11.2.1-cp310-cp310-win_arm64.whl", hash = "sha256:2728567e249cdd939f6cc3d1f049595c66e4187f3c34078cbc0a7d21c47482d2"},
    {file = "pillow-11.2.1-cp311-cp311-macosx_10_10_x86_64.whl", hash = "sha256:35ca289f712ccfc699508c4658a1d14652e8033e9b69839edf83cbdd0ba39e70"},
    {file = "pillow-11.2.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:e0409af9f829f87a2dfb7e259f78f317a5351f2045158be321fd135973fff7bf"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d4e5c5edee874dce4f653dbe59db7c73a600119fbea8d31f53423586ee2aafd7"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b93a07e76d13bff9444f1a029e0af2964e654bfc2e2c2d46bfd080df5ad5f3d8"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:e6def7eed9e7fa90fde255afaf08060dc4b343bbe524a8f69bdd2a2f0018f600"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_28_x86_64.whl", hash = "sha256:8f4f3724c068be008c08257207210c138d5f3731af6c155a81c2b09a9eb3a788"},
    {file = "pillow-11.2.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:a0a6709b47019dff32e678bc12c63008311b82b9327613f534e496dacaefb71e"},
    {file = "pillow-11.2.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:f6b0c664ccb879109ee3ca702a9272d877f4fcd21e5eb63c26422fd6e415365e"},
    {file = "pillow-11.2.1-cp311-cp311-win32.whl", hash = "sha256:cc5d875d56e49f112b6def6813c4e3d3036d269c008bf8aef72cd08d20ca6df6"},
    {file = "pillow-11.2.1-cp311-cp311-win_amd64.whl", hash = "sha256:0f5c7eda47bf8e3c8a283762cab94e496ba977a420868cb819159980b6709193"},
    {file = "pillow-11.2.1-cp311-cp311-win_arm64.whl", hash = "sha256:4d375eb838755f2528ac8cbc926c3e31cc49ca4ad0cf79cff48b20e30634a4a7"},
    {file = "pillow-11.2.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:78afba22027b4accef10dbd5eed84425930ba41b3ea0a86fa8d20baaf19d807f"},
    {file = "pillow-11.2.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:78092232a4ab376a35d68c4e6d5e00dfd73454bd12b230420025fbe178ee3b0b"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:25a5f306095c6780c52e6bbb6109624b95c5b18e40aab1c3041da3e9e0cd3e2d"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0c7b29dbd4281923a2bfe562acb734cee96bbb129e96e6972d315ed9f232bef4"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:3e645b020f3209a0181a418bffe7b4a93171eef6c4ef6cc20980b30bebf17b7d"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:b2dbea1012ccb784a65349f57bbc93730b96e85b42e9bf7b01ef40443db720b4"},
    {file = "pillow-11.2.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:da3104c57bbd72948d75f6a9389e6727d2ab6333c3617f0a89d72d4940aa0443"},
    {file = "pillow-11.2.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:598174aef4589af795f66f9caab87ba4ff860ce08cd5bb447c6fc553ffee603c"},
    {file = "pillow-11.2.1-cp312-cp312-win32.whl", hash = "sha256:1d535df14716e7f8776b9e7fee118576d65572b4aad3ed639be9e4fa88a1cad3"},
    {file = "pillow-11.2.1-cp312-cp312-win_amd64.whl", hash = "sha256:14e33b28bf17c7a38eede290f77db7c664e4eb01f7869e37fa98a5aa95978941"},
    {file = "pillow-11.2.1-cp312-cp312-win_arm64.whl", hash = "sha256:21e1470ac9e5739ff880c211fc3af01e3ae505859392bf65458c224d0bf283eb"},
    {file = "pillow-11.2.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:fdec757fea0b793056419bca3e9932eb2b0ceec90ef4813ea4c1e072c389eb28"},
    {file = "pillow-11.2.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:b0e130705d568e2f43a17bcbe74d90958e8a16263868a12c3e0d9c8162690830"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7bdb5e09068332578214cadd9c05e3d64d99e0e87591be22a324bdbc18925be0"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d189ba1bebfbc0c0e529159631ec72bb9e9bc041f01ec6d3233d6d82eb823bc1"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:191955c55d8a712fab8934a42bfefbf99dd0b5875078240943f913bb66d46d9f"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:ad275964d52e2243430472fc5d2c2334b4fc3ff9c16cb0a19254e25efa03a155"},
    {file = "pillow-11.2.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:750f96efe0597382660d8b53e90dd1dd44568a8edb51cb7f9d5d918b80d4de14"},
    {file = "pillow-11.2.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:fe15238d3798788d00716637b3d4e7bb6bde18b26e5d08335a96e88564a36b6b"},
    {file = "pillow-11.2.1-cp313-cp313-win32.whl", hash = "sha256:3fe735ced9a607fee4f481423a9c36701a39719252a9bb251679635f99d0f7d2"},
    {file = "pillow-11.2.1-cp313-cp313-win_amd64.whl", hash = "sha256:74ee3d7ecb3f3c05459ba95eed5efa28d6092d751ce9bf20e3e253a4e497e691"},
    {file = "pillow-11.2.1-cp313-cp313-win_arm64.whl", hash = "sha256:5119225c622403afb4b44bad4c1ca6c1f98eed79db8d3bc6e4e160fc6339d66c"},
    {file = "pillow-11.2.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:8ce2e8411c7aaef53e6bb29fe98f28cd4fbd9a1d9be2eeea434331aac0536b22"},
    {file = "pillow-11.2.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:9ee66787e095127116d91dea2143db65c7bb1e232f617aa5957c0d9d2a3f23a7"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9622e3b6c1d8b551b6e6f21873bdcc55762b4b2126633014cea1803368a9aa16"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:63b5dff3a68f371ea06025a1a6966c9a1e1ee452fc8020c2cd0ea41b83e9037b"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_28_aarch64.whl", hash = "sha256:31df6e2d3d8fc99f993fd253e97fae451a8db2e7207acf97859732273e108406"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:062b7a42d672c45a70fa1f8b43d1d38ff76b63421cbbe7f88146b39e8a558d91"},
    {file = "pillow-11.2.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:4eb92eca2711ef8be42fd3f67533765d9fd043b8c80db204f16c8ea62ee1a751"},
    {file = "pillow-11.2.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:f91ebf30830a48c825590aede79376cb40f110b387c17ee9bd59932c961044f9"},
    {file = "pillow-11.2.1-cp313-cp313t-win32.whl", hash = "sha256:e0b55f27f584ed623221cfe995c912c61606be8513bfa0e07d2c674b4516d9dd"},
    {file = "pillow-11.2.1-cp313-cp313t-win_amd64.whl", hash = "sha256:36d6b82164c39ce5482f649b437382c0fb2395eabc1e2b1702a6deb8ad647d6e"},
    {file = "pillow-11.2.1-cp313-cp313t-win_arm64.whl", hash = "sha256:225c832a13326e34f212d2072982bb1adb210e0cc0b153e688743018c94a2681"},
    {file = "pillow-11.2.1-cp39-cp39-macosx_10_10_x86_64.whl", hash = "sha256:7491cf8a79b8eb867d419648fff2f83cb0b3891c8b36da92cc7f1931d46108c8"},
    {file = "pillow-11.2.1-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:8b02d8f9cb83c52578a0b4beadba92e37d83a4ef11570a8688bbf43f4ca50909"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:014ca0050c85003620526b0ac1ac53f56fc93af128f7546623cc8e31875ab928"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3692b68c87096ac6308296d96354eddd25f98740c9d2ab54e1549d6c8aea9d79"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_28_aarch64.whl", hash = "sha256:f781dcb0bc9929adc77bad571b8621ecb1e4cdef86e940fe2e5b5ee24fd33b35"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_28_x86_64.whl", hash = "sha256:2b490402c96f907a166615e9a5afacf2519e28295f157ec3a2bb9bd57de638cb"},
    {file = "pillow-11.2.1-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:dd6b20b93b3ccc9c1b597999209e4bc5cf2853f9ee66e3fc9a400a78733ffc9a"},
    {file = "pillow-11.2.1-cp39-cp39-musllinux_1_2_x86_64.whl", hash = "sha256:4b835d89c08a6c2ee7781b8dd0a30209a8012b5f09c0a665b65b0eb3560b6f36"},
    {file = "pillow-11.2.1-cp39-cp39-win32.whl", hash = "sha256:b10428b3416d4f9c61f94b494681280be7686bda15898a3a9e08eb66a6d92d67"},
    {file = "pillow-11.2.1-cp39-cp39-win_amd64.whl", hash = "sha256:6ebce70c3f486acf7591a3d73431fa504a4e18a9b97ff27f5f47b7368e4b9dd1"},
    {file = "pillow-11.2.1-cp39-cp39-win_arm64.whl", hash = "sha256:c27476257b2fdcd7872d54cfd119b3a9ce4610fb85c8e32b70b42e3680a29a1e"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-macosx_10_15_x86_64.whl", hash = "sha256:9b7b0d4fd2635f54ad82785d56bc0d94f147096493a79985d0ab57aedd563156"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl", hash = "sha256:aa442755e31c64037aa7c1cb186e0b369f8416c567381852c63444dd666fb772"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f0d3348c95b766f54b76116d53d4cb171b52992a1027e7ca50c81b43b9d9e363"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:85d27ea4c889342f7e35f6d56e7e1cb345632ad592e8c51b693d7b7556043ce0"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:bf2c33d6791c598142f00c9c4c7d47f6476731c31081331664eb26d6ab583e01"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:e616e7154c37669fc1dfc14584f11e284e05d1c650e1c0f972f281c4ccc53193"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-win_amd64.whl", hash = "sha256:39ad2e0f424394e3aebc40168845fee52df1394a4673a6ee512d840d14ab3013"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-macosx_10_15_x86_64.whl", hash = "sha256:80f1df8dbe9572b4b7abdfa17eb5d78dd620b1d55d9e25f834efdbee872d3aed"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-macosx_11_0_arm64.whl", hash = "sha256:ea926cfbc3957090becbcbbb65ad177161a2ff2ad578b5a6ec9bb1e1cd78753c"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:738db0e0941ca0376804d4de6a782c005245264edaa253ffce24e5a15cbdc7bd"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9db98ab6565c69082ec9b0d4e40dd9f6181dab0dd236d26f7a50b8b9bfbd5076"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:036e53f4170e270ddb8797d4c590e6dd14d28e15c7da375c18978045f7e6c37b"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:14f73f7c291279bd65fda51ee87affd7c1e097709f7fdd0188957a16c264601f"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-win_amd64.whl", hash = "sha256:208653868d5c9ecc2b327f9b9ef34e0e42a4cdd172c2988fd81d62d2bc9bc044"},
    {file = "pillow-11.2.1.tar.gz", hash = "sha256:a64dd61998416367b7ef979b73d3a85853ba9bec4c2925f74e588879a58716b6"},
]

[package.extras]
docs = ["furo", "olefile", "sphinx (>=8.2)", "sphinx-copybutton", "sphinx-inline-tabs", "sphinxext-opengraph"]
fpx = ["olefile"]
mic = ["olefile"]
test-arrow = ["pyarrow"]
tests = ["check-manifest", "coverage (>=7.4.2)", "defusedxml", "markdown2", "olefile", "packaging", "pyroma", "pytest", "pytest-cov", "pytest-timeout", "trove-classifiers (>=2024.10.12)"]
typing = ["typing-extensions ; python_version < \"3.10\""]
xmp = ["defusedxml"]

[[package]]
name = "python-dotenv"
version = "1.0.1"
description = "Read key-value pairs from a .env file and set them as environment variables"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "python-dotenv-1.0.1.tar.gz", hash = "sha256:e324ee90a023d808f1959c46bcbc04446a10ced277783dc6ee09987c37ec10ca"},
    {file = "python_dotenv-1.0.1-py3-none-any.whl", hash = "sha256:f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a"},
]

[package.extras]
cli = ["click (>=5.0)"]

[[package]]
name = "sqlparse"
version = "0.5.3"
description = "A non-validating SQL parser."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "sqlparse-0.5.3-py3-none-any.whl", hash = "sha256:cf2196ed3418f3ba5de6af7e82c694a9fbdbfecccdfc72e281548517081f16ca"},
    {file = "sqlparse-0.5.3.tar.gz", hash = "sha256:09f67787f56a0b16ecdbde1bfc7f5d9c3371ca683cfeaa8e6ff60b4807ec9272"},
]

[package.extras]
dev = ["build", "hatch"]
doc = ["sphinx"]

[[package]]
name = "tzdata"
version = "2025.1"
description = "Provider of IANA time zone data"
optional = false
python-versions = ">=2"
groups = ["main"]
markers = "sys_platform == \"win32\""
files = [
    {file = "tzdata-2025.1-py2.py3-none-any.whl", hash = "sha256:7e127113816800496f027041c570f50bcd464a020098a3b6b199517772303639"},
    {file = "tzdata-2025.1.tar.gz", hash = "sha256:24894909e88cdb28bd1636c6887801df64cb485bd593f2fd83ef29075a81d694"},
]

[metadata]
lock-version = "2.1"
python-versions = ">=3.13"
content-hash = "224b1c0c78a7595b8e40b2e96a3fa36d6e9d1785564304e5693a6c07616f2ec5"


======================================================================
File: pyproject.toml
Path: C:\python\django\HomeWorcks\Barbershop\pyproject.toml
======================================================================

[project]
name = "barbershop"
version = "0.1.0"
description = "Домашняя работа с офигенным сайтом офигенного барбершопа!"
authors = [
    {name = "Konstantin",email = "Kostick_zenin@mai.ru"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django (>=5.1.7,<6.0.0)",
    "python-dotenv (>=1.0.1,<2.0.0)",
    "markdown (>=3.7,<4.0)",
    "django-extensions (>=4.1,<5.0)",
    "pillow (>=11.2.1,<12.0.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


======================================================================
File: Quantum_Razor_barbershop.txt
Path: C:\python\django\HomeWorcks\Barbershop\Quantum_Razor_barbershop.txt
======================================================================


======================================================================
File: .gitignore
Path: C:\python\django\HomeWorcks\Barbershop\.gitignore
======================================================================

.venv
.env
**/__pycache__/
db.sqlite3
/media/
*.pyc

======================================================================
File: arguments.txt
Path: C:\python\django\HomeWorcks\Barbershop\arguments.txt
======================================================================

Индексы в модели заказа я сделал такими:

1. Индекс по имени клиента так как по имени будет часто осуществляться поиск заказа
2. Индекс по номеру телефона так как по нему тоже будет часто осуществляться поиск заказа
3. Индекс по комментарию так как по нему тоже будет часто осуществляться поиск заказа.
все 3 выше перечисленные индексы считаю нужными так как в форме поиска есть озможность искать по 1 из них, что по моему мнению будет осуществляться часто.
4. Составной индекс по имени клиента и номеру телефона так как по ним будет часто осуществляться поиск заказа
5. Составной индекс по имени клиента и комментарию так как по ним будет часто осуществляться поиск заказа
Данные составные индексы считаю нужными так как по этим сочетаниям будет больше всего запросов.
Так же я добавил индексы в модель мастера на поле "first_name" так как имя мастера будет часто использоваться на сайте, в модель услуг на поле "name" так как название услуги будет часто использоваться на сайте а так же в модель отзыва на поле "client_name" так как отзывы отображаются на главной странице.

======================================================================
File: manage.py
Path: C:\python\django\HomeWorcks\Barbershop\manage.py
======================================================================

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Quantum_Razor_barbershop.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


======================================================================
File: poetry.lock
Path: C:\python\django\HomeWorcks\Barbershop\poetry.lock
======================================================================

# This file is automatically @generated by Poetry 2.1.1 and should not be changed by hand.

[[package]]
name = "asgiref"
version = "3.8.1"
description = "ASGI specs, helper code, and adapters"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "asgiref-3.8.1-py3-none-any.whl", hash = "sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47"},
    {file = "asgiref-3.8.1.tar.gz", hash = "sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590"},
]

[package.extras]
tests = ["mypy (>=0.800)", "pytest", "pytest-asyncio"]

[[package]]
name = "django"
version = "5.1.7"
description = "A high-level Python web framework that encourages rapid development and clean, pragmatic design."
optional = false
python-versions = ">=3.10"
groups = ["main"]
files = [
    {file = "Django-5.1.7-py3-none-any.whl", hash = "sha256:1323617cb624add820cb9611cdcc788312d250824f92ca6048fda8625514af2b"},
    {file = "Django-5.1.7.tar.gz", hash = "sha256:30de4ee43a98e5d3da36a9002f287ff400b43ca51791920bfb35f6917bfe041c"},
]

[package.dependencies]
asgiref = ">=3.8.1,<4"
sqlparse = ">=0.3.1"
tzdata = {version = "*", markers = "sys_platform == \"win32\""}

[package.extras]
argon2 = ["argon2-cffi (>=19.1.0)"]
bcrypt = ["bcrypt"]

[[package]]
name = "django-extensions"
version = "4.1"
description = "Extensions for Django"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "django_extensions-4.1-py3-none-any.whl", hash = "sha256:0699a7af28f2523bf8db309a80278519362cd4b6e1fd0a8cd4bf063e1e023336"},
    {file = "django_extensions-4.1.tar.gz", hash = "sha256:7b70a4d28e9b840f44694e3f7feb54f55d495f8b3fa6c5c0e5e12bcb2aa3cdeb"},
]

[package.dependencies]
django = ">=4.2"

[[package]]
name = "markdown"
version = "3.7"
description = "Python implementation of John Gruber's Markdown."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "Markdown-3.7-py3-none-any.whl", hash = "sha256:7eb6df5690b81a1d7942992c97fad2938e956e79df20cbc6186e9c3a77b1c803"},
    {file = "markdown-3.7.tar.gz", hash = "sha256:2ae2471477cfd02dbbf038d5d9bc226d40def84b4fe2986e49b59b6b472bbed2"},
]

[package.extras]
docs = ["mdx-gh-links (>=0.2)", "mkdocs (>=1.5)", "mkdocs-gen-files", "mkdocs-literate-nav", "mkdocs-nature (>=0.6)", "mkdocs-section-index", "mkdocstrings[python]"]
testing = ["coverage", "pyyaml"]

[[package]]
name = "pillow"
version = "11.2.1"
description = "Python Imaging Library (Fork)"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "pillow-11.2.1-cp310-cp310-macosx_10_10_x86_64.whl", hash = "sha256:d57a75d53922fc20c165016a20d9c44f73305e67c351bbc60d1adaf662e74047"},
    {file = "pillow-11.2.1-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:127bf6ac4a5b58b3d32fc8289656f77f80567d65660bc46f72c0d77e6600cc95"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b4ba4be812c7a40280629e55ae0b14a0aafa150dd6451297562e1764808bbe61"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c8bd62331e5032bc396a93609982a9ab6b411c05078a52f5fe3cc59234a3abd1"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_28_aarch64.whl", hash = "sha256:562d11134c97a62fe3af29581f083033179f7ff435f78392565a1ad2d1c2c45c"},
    {file = "pillow-11.2.1-cp310-cp310-manylinux_2_28_x86_64.whl", hash = "sha256:c97209e85b5be259994eb5b69ff50c5d20cca0f458ef9abd835e262d9d88b39d"},
    {file = "pillow-11.2.1-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:0c3e6d0f59171dfa2e25d7116217543310908dfa2770aa64b8f87605f8cacc97"},
    {file = "pillow-11.2.1-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:cc1c3bc53befb6096b84165956e886b1729634a799e9d6329a0c512ab651e579"},
    {file = "pillow-11.2.1-cp310-cp310-win32.whl", hash = "sha256:312c77b7f07ab2139924d2639860e084ec2a13e72af54d4f08ac843a5fc9c79d"},
    {file = "pillow-11.2.1-cp310-cp310-win_amd64.whl", hash = "sha256:9bc7ae48b8057a611e5fe9f853baa88093b9a76303937449397899385da06fad"},
    {file = "pillow-11.2.1-cp310-cp310-win_arm64.whl", hash = "sha256:2728567e249cdd939f6cc3d1f049595c66e4187f3c34078cbc0a7d21c47482d2"},
    {file = "pillow-11.2.1-cp311-cp311-macosx_10_10_x86_64.whl", hash = "sha256:35ca289f712ccfc699508c4658a1d14652e8033e9b69839edf83cbdd0ba39e70"},
    {file = "pillow-11.2.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:e0409af9f829f87a2dfb7e259f78f317a5351f2045158be321fd135973fff7bf"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d4e5c5edee874dce4f653dbe59db7c73a600119fbea8d31f53423586ee2aafd7"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b93a07e76d13bff9444f1a029e0af2964e654bfc2e2c2d46bfd080df5ad5f3d8"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_28_aarch64.whl", hash = "sha256:e6def7eed9e7fa90fde255afaf08060dc4b343bbe524a8f69bdd2a2f0018f600"},
    {file = "pillow-11.2.1-cp311-cp311-manylinux_2_28_x86_64.whl", hash = "sha256:8f4f3724c068be008c08257207210c138d5f3731af6c155a81c2b09a9eb3a788"},
    {file = "pillow-11.2.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:a0a6709b47019dff32e678bc12c63008311b82b9327613f534e496dacaefb71e"},
    {file = "pillow-11.2.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:f6b0c664ccb879109ee3ca702a9272d877f4fcd21e5eb63c26422fd6e415365e"},
    {file = "pillow-11.2.1-cp311-cp311-win32.whl", hash = "sha256:cc5d875d56e49f112b6def6813c4e3d3036d269c008bf8aef72cd08d20ca6df6"},
    {file = "pillow-11.2.1-cp311-cp311-win_amd64.whl", hash = "sha256:0f5c7eda47bf8e3c8a283762cab94e496ba977a420868cb819159980b6709193"},
    {file = "pillow-11.2.1-cp311-cp311-win_arm64.whl", hash = "sha256:4d375eb838755f2528ac8cbc926c3e31cc49ca4ad0cf79cff48b20e30634a4a7"},
    {file = "pillow-11.2.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:78afba22027b4accef10dbd5eed84425930ba41b3ea0a86fa8d20baaf19d807f"},
    {file = "pillow-11.2.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:78092232a4ab376a35d68c4e6d5e00dfd73454bd12b230420025fbe178ee3b0b"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:25a5f306095c6780c52e6bbb6109624b95c5b18e40aab1c3041da3e9e0cd3e2d"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0c7b29dbd4281923a2bfe562acb734cee96bbb129e96e6972d315ed9f232bef4"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:3e645b020f3209a0181a418bffe7b4a93171eef6c4ef6cc20980b30bebf17b7d"},
    {file = "pillow-11.2.1-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:b2dbea1012ccb784a65349f57bbc93730b96e85b42e9bf7b01ef40443db720b4"},
    {file = "pillow-11.2.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:da3104c57bbd72948d75f6a9389e6727d2ab6333c3617f0a89d72d4940aa0443"},
    {file = "pillow-11.2.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:598174aef4589af795f66f9caab87ba4ff860ce08cd5bb447c6fc553ffee603c"},
    {file = "pillow-11.2.1-cp312-cp312-win32.whl", hash = "sha256:1d535df14716e7f8776b9e7fee118576d65572b4aad3ed639be9e4fa88a1cad3"},
    {file = "pillow-11.2.1-cp312-cp312-win_amd64.whl", hash = "sha256:14e33b28bf17c7a38eede290f77db7c664e4eb01f7869e37fa98a5aa95978941"},
    {file = "pillow-11.2.1-cp312-cp312-win_arm64.whl", hash = "sha256:21e1470ac9e5739ff880c211fc3af01e3ae505859392bf65458c224d0bf283eb"},
    {file = "pillow-11.2.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:fdec757fea0b793056419bca3e9932eb2b0ceec90ef4813ea4c1e072c389eb28"},
    {file = "pillow-11.2.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:b0e130705d568e2f43a17bcbe74d90958e8a16263868a12c3e0d9c8162690830"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7bdb5e09068332578214cadd9c05e3d64d99e0e87591be22a324bdbc18925be0"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d189ba1bebfbc0c0e529159631ec72bb9e9bc041f01ec6d3233d6d82eb823bc1"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:191955c55d8a712fab8934a42bfefbf99dd0b5875078240943f913bb66d46d9f"},
    {file = "pillow-11.2.1-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:ad275964d52e2243430472fc5d2c2334b4fc3ff9c16cb0a19254e25efa03a155"},
    {file = "pillow-11.2.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:750f96efe0597382660d8b53e90dd1dd44568a8edb51cb7f9d5d918b80d4de14"},
    {file = "pillow-11.2.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:fe15238d3798788d00716637b3d4e7bb6bde18b26e5d08335a96e88564a36b6b"},
    {file = "pillow-11.2.1-cp313-cp313-win32.whl", hash = "sha256:3fe735ced9a607fee4f481423a9c36701a39719252a9bb251679635f99d0f7d2"},
    {file = "pillow-11.2.1-cp313-cp313-win_amd64.whl", hash = "sha256:74ee3d7ecb3f3c05459ba95eed5efa28d6092d751ce9bf20e3e253a4e497e691"},
    {file = "pillow-11.2.1-cp313-cp313-win_arm64.whl", hash = "sha256:5119225c622403afb4b44bad4c1ca6c1f98eed79db8d3bc6e4e160fc6339d66c"},
    {file = "pillow-11.2.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:8ce2e8411c7aaef53e6bb29fe98f28cd4fbd9a1d9be2eeea434331aac0536b22"},
    {file = "pillow-11.2.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:9ee66787e095127116d91dea2143db65c7bb1e232f617aa5957c0d9d2a3f23a7"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9622e3b6c1d8b551b6e6f21873bdcc55762b4b2126633014cea1803368a9aa16"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:63b5dff3a68f371ea06025a1a6966c9a1e1ee452fc8020c2cd0ea41b83e9037b"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_28_aarch64.whl", hash = "sha256:31df6e2d3d8fc99f993fd253e97fae451a8db2e7207acf97859732273e108406"},
    {file = "pillow-11.2.1-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:062b7a42d672c45a70fa1f8b43d1d38ff76b63421cbbe7f88146b39e8a558d91"},
    {file = "pillow-11.2.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:4eb92eca2711ef8be42fd3f67533765d9fd043b8c80db204f16c8ea62ee1a751"},
    {file = "pillow-11.2.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:f91ebf30830a48c825590aede79376cb40f110b387c17ee9bd59932c961044f9"},
    {file = "pillow-11.2.1-cp313-cp313t-win32.whl", hash = "sha256:e0b55f27f584ed623221cfe995c912c61606be8513bfa0e07d2c674b4516d9dd"},
    {file = "pillow-11.2.1-cp313-cp313t-win_amd64.whl", hash = "sha256:36d6b82164c39ce5482f649b437382c0fb2395eabc1e2b1702a6deb8ad647d6e"},
    {file = "pillow-11.2.1-cp313-cp313t-win_arm64.whl", hash = "sha256:225c832a13326e34f212d2072982bb1adb210e0cc0b153e688743018c94a2681"},
    {file = "pillow-11.2.1-cp39-cp39-macosx_10_10_x86_64.whl", hash = "sha256:7491cf8a79b8eb867d419648fff2f83cb0b3891c8b36da92cc7f1931d46108c8"},
    {file = "pillow-11.2.1-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:8b02d8f9cb83c52578a0b4beadba92e37d83a4ef11570a8688bbf43f4ca50909"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:014ca0050c85003620526b0ac1ac53f56fc93af128f7546623cc8e31875ab928"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3692b68c87096ac6308296d96354eddd25f98740c9d2ab54e1549d6c8aea9d79"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_28_aarch64.whl", hash = "sha256:f781dcb0bc9929adc77bad571b8621ecb1e4cdef86e940fe2e5b5ee24fd33b35"},
    {file = "pillow-11.2.1-cp39-cp39-manylinux_2_28_x86_64.whl", hash = "sha256:2b490402c96f907a166615e9a5afacf2519e28295f157ec3a2bb9bd57de638cb"},
    {file = "pillow-11.2.1-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:dd6b20b93b3ccc9c1b597999209e4bc5cf2853f9ee66e3fc9a400a78733ffc9a"},
    {file = "pillow-11.2.1-cp39-cp39-musllinux_1_2_x86_64.whl", hash = "sha256:4b835d89c08a6c2ee7781b8dd0a30209a8012b5f09c0a665b65b0eb3560b6f36"},
    {file = "pillow-11.2.1-cp39-cp39-win32.whl", hash = "sha256:b10428b3416d4f9c61f94b494681280be7686bda15898a3a9e08eb66a6d92d67"},
    {file = "pillow-11.2.1-cp39-cp39-win_amd64.whl", hash = "sha256:6ebce70c3f486acf7591a3d73431fa504a4e18a9b97ff27f5f47b7368e4b9dd1"},
    {file = "pillow-11.2.1-cp39-cp39-win_arm64.whl", hash = "sha256:c27476257b2fdcd7872d54cfd119b3a9ce4610fb85c8e32b70b42e3680a29a1e"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-macosx_10_15_x86_64.whl", hash = "sha256:9b7b0d4fd2635f54ad82785d56bc0d94f147096493a79985d0ab57aedd563156"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl", hash = "sha256:aa442755e31c64037aa7c1cb186e0b369f8416c567381852c63444dd666fb772"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f0d3348c95b766f54b76116d53d4cb171b52992a1027e7ca50c81b43b9d9e363"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:85d27ea4c889342f7e35f6d56e7e1cb345632ad592e8c51b693d7b7556043ce0"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:bf2c33d6791c598142f00c9c4c7d47f6476731c31081331664eb26d6ab583e01"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:e616e7154c37669fc1dfc14584f11e284e05d1c650e1c0f972f281c4ccc53193"},
    {file = "pillow-11.2.1-pp310-pypy310_pp73-win_amd64.whl", hash = "sha256:39ad2e0f424394e3aebc40168845fee52df1394a4673a6ee512d840d14ab3013"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-macosx_10_15_x86_64.whl", hash = "sha256:80f1df8dbe9572b4b7abdfa17eb5d78dd620b1d55d9e25f834efdbee872d3aed"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-macosx_11_0_arm64.whl", hash = "sha256:ea926cfbc3957090becbcbbb65ad177161a2ff2ad578b5a6ec9bb1e1cd78753c"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:738db0e0941ca0376804d4de6a782c005245264edaa253ffce24e5a15cbdc7bd"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9db98ab6565c69082ec9b0d4e40dd9f6181dab0dd236d26f7a50b8b9bfbd5076"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:036e53f4170e270ddb8797d4c590e6dd14d28e15c7da375c18978045f7e6c37b"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:14f73f7c291279bd65fda51ee87affd7c1e097709f7fdd0188957a16c264601f"},
    {file = "pillow-11.2.1-pp311-pypy311_pp73-win_amd64.whl", hash = "sha256:208653868d5c9ecc2b327f9b9ef34e0e42a4cdd172c2988fd81d62d2bc9bc044"},
    {file = "pillow-11.2.1.tar.gz", hash = "sha256:a64dd61998416367b7ef979b73d3a85853ba9bec4c2925f74e588879a58716b6"},
]

[package.extras]
docs = ["furo", "olefile", "sphinx (>=8.2)", "sphinx-copybutton", "sphinx-inline-tabs", "sphinxext-opengraph"]
fpx = ["olefile"]
mic = ["olefile"]
test-arrow = ["pyarrow"]
tests = ["check-manifest", "coverage (>=7.4.2)", "defusedxml", "markdown2", "olefile", "packaging", "pyroma", "pytest", "pytest-cov", "pytest-timeout", "trove-classifiers (>=2024.10.12)"]
typing = ["typing-extensions ; python_version < \"3.10\""]
xmp = ["defusedxml"]

[[package]]
name = "python-dotenv"
version = "1.0.1"
description = "Read key-value pairs from a .env file and set them as environment variables"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "python-dotenv-1.0.1.tar.gz", hash = "sha256:e324ee90a023d808f1959c46bcbc04446a10ced277783dc6ee09987c37ec10ca"},
    {file = "python_dotenv-1.0.1-py3-none-any.whl", hash = "sha256:f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a"},
]

[package.extras]
cli = ["click (>=5.0)"]

[[package]]
name = "sqlparse"
version = "0.5.3"
description = "A non-validating SQL parser."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "sqlparse-0.5.3-py3-none-any.whl", hash = "sha256:cf2196ed3418f3ba5de6af7e82c694a9fbdbfecccdfc72e281548517081f16ca"},
    {file = "sqlparse-0.5.3.tar.gz", hash = "sha256:09f67787f56a0b16ecdbde1bfc7f5d9c3371ca683cfeaa8e6ff60b4807ec9272"},
]

[package.extras]
dev = ["build", "hatch"]
doc = ["sphinx"]

[[package]]
name = "tzdata"
version = "2025.1"
description = "Provider of IANA time zone data"
optional = false
python-versions = ">=2"
groups = ["main"]
markers = "sys_platform == \"win32\""
files = [
    {file = "tzdata-2025.1-py2.py3-none-any.whl", hash = "sha256:7e127113816800496f027041c570f50bcd464a020098a3b6b199517772303639"},
    {file = "tzdata-2025.1.tar.gz", hash = "sha256:24894909e88cdb28bd1636c6887801df64cb485bd593f2fd83ef29075a81d694"},
]

[metadata]
lock-version = "2.1"
python-versions = ">=3.13"
content-hash = "224b1c0c78a7595b8e40b2e96a3fa36d6e9d1785564304e5693a6c07616f2ec5"



======================================================================
File: README.md
Path: C:\python\django\HomeWorcks\Barbershop\README.md
======================================================================

Это проект барбершопа для домашних работ


======================================================================
File: launch.json
Path: C:\python\django\HomeWorcks\Barbershop\.vscode\launch.json
======================================================================

{
    "version": "0.2.0",
    "configurations": [
      {
        "name": "Django: Запуск через Poetry",
        "type": "debugpy",
        "request": "launch",
        "program": "${workspaceFolder}/manage.py",
        "args": ["runserver"],
        "django": true,
        "justMyCode": true,
        "console": "integratedTerminal",
        "env": {
          "PYTHONPATH": "${workspaceFolder}"
        }
      },
      {
        "name": "Django: Отладка представлений",
        "type": "debugpy",
        "request": "launch",
        "program": "${workspaceFolder}/manage.py",
        "args": ["runserver", "--noreload"],
        "django": true,
        "justMyCode": false,
        "console": "integratedTerminal",
        "env": {
          "PYTHONPATH": "${workspaceFolder}"
        }
      }
    ]
  }

======================================================================
File: admin.py
Path: C:\python\django\HomeWorcks\Barbershop\core\admin.py
======================================================================

from django.contrib import admin
from .models import *

# Register your models here.
admin.site.register(Order)
admin.site.register(Master)
admin.site.register(Service)


@admin.register(Review)
class ReviewAdmin(admin.ModelAdmin):
    list_display = ('client_name', 'master', 'rating', 'created_at', 'is_published')
    list_filter = ('is_published', 'rating', 'master')
    search_fields = ('client_name', 'text')
    list_editable = ('is_published',)
    readonly_fields = ('created_at',)
    list_per_page = 20
    
    fieldsets = (
        ('Основная информация', {
            'fields': ('client_name', 'master', 'text', 'rating', 'photo')
        }),
        ('Модерация', {
            'fields': ('is_published', 'created_at')
        }),
    )
    
    actions = ['publish_reviews', 'unpublish_reviews']
    
    def publish_reviews(self, request, queryset):
        queryset.update(is_published=True)
    publish_reviews.short_description = "Опубликовать выбранные отзывы"
    
    def unpublish_reviews(self, request, queryset):
        queryset.update(is_published=False)
    unpublish_reviews.short_description = "Снять с публикации"
    

======================================================================
File: apps.py
Path: C:\python\django\HomeWorcks\Barbershop\core\apps.py
======================================================================

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'


======================================================================
File: data.py
Path: C:\python\django\HomeWorcks\Barbershop\core\data.py
======================================================================

masters = [
    {"id": 1, "name": "Эльдар 'Бритва' Рязанов"},
    {"id": 2, "name": "Зоя 'Ножницы' Космодемьянская"},
    {"id": 3, "name": "Борис 'Фен' Пастернак"},
    {"id": 4, "name": "Иннокентий 'Лак' Смоктуновский"},
    {"id": 5, "name": "Раиса 'Бигуди' Горбачёва"},
]


# Список возможных услуг барбершопа
services = [
    "Стрижка под 'Горшок'",
    "Укладка 'Взрыв на макаронной фабрике'",
    "Королевское бритье опасной бритвой",
    "Окрашивание 'Жизнь в розовом цвете'",
    "Мытье головы 'Душ впечатлений'",
    "Стрижка бороды 'Боярин'",
    "Массаж головы 'Озарение'",
    "Укладка 'Ветер в голове'",
    "Плетение косичек 'Викинг'",
    "Полировка лысины до блеска",
]

# Статусы заявок
STATUS_NEW = "новая"
STATUS_CONFIRMED = "подтвержденная"
STATUS_CANCELLED = "отмененная"
STATUS_COMPLETED = "выполненная"

# Тестовые данные заявок
orders = [
    {
        "id": 1,
        "client_name": "Пётр 'Безголовый' Головин",
        "services": ["Стрижка под 'Горшок'", "Полировка лысины до блеска"],
        "master_id": 1,
        "date": "2025-03-20",
        "status": STATUS_NEW,
    },
    {
        "id": 2,
        "client_name": "Василий 'Кудрявый' Прямиков",
        "services": ["Укладка 'Взрыв на макаронной фабрике'"],
        "master_id": 2,
        "date": "2025-03-21",
        "status": STATUS_CONFIRMED,
    },
    {
        "id": 3,
        "client_name": "Афанасий 'Бородач' Бритвенников",
        "services": [
            "Королевское бритье опасной бритвой",
            "Стрижка бороды 'Боярин'",
            "Массаж головы 'Озарение'",
        ],
        "master_id": 3,
        "date": "2025-03-19",
        "status": STATUS_COMPLETED,
    },
    {
        "id": 4,
        "client_name": "Зинаида 'Радуга' Красильникова",
        "services": ["Окрашивание 'Жизнь в розовом цвете'", "Укладка 'Ветер в голове'"],
        "master_id": 4,
        "date": "2025-03-22",
        "status": STATUS_CANCELLED,
    },
    {
        "id": 5,
        "client_name": "Олег 'Викинг' Рюрикович",
        "services": ["Плетение косичек 'Викинг'", "Стрижка бороды 'Боярин'"],
        "master_id": 5,
        "date": "2025-03-23",
        "status": STATUS_NEW,
    },
    {
        "id": 6,
        "client_name": "Геннадий 'Блестящий' Лысенко",
        "services": ["Полировка лысины до блеска", "Массаж головы 'Озарение'"],
        "master_id": 1,
        "date": "2025-03-24",
        "status": STATUS_CONFIRMED,
    },
    {
        "id": 7,
        "client_name": "Марина 'Рапунцель' Косичкина",
        "services": ["Укладка 'Ветер в голове'", "Мытье головы 'Душ впечатлений'"],
        "master_id": 2,
        "date": "2025-03-25",
        "status": STATUS_CANCELLED,
    },
    {
        "id": 8,
        "client_name": "Федор 'Кучерявый' Завитушкин",
        "services": [
            "Укладка 'Взрыв на макаронной фабрике'",
            "Массаж головы 'Озарение'",
            "Мытье головы 'Душ впечатлений'",
        ],
        "master_id": 3,
        "date": "2025-03-26",
        "status": STATUS_COMPLETED,
    },
    {
        "id": 9,
        "client_name": "Елизавета 'Корона' Царевна",
        "services": ["Королевское бритье опасной бритвой"],
        "master_id": 4,
        "date": "2025-03-27",
        "status": STATUS_NEW,
    },
    {
        "id": 10,
        "client_name": "Добрыня 'Богатырь' Никитич",
        "services": [
            "Стрижка бороды 'Боярин'",
            "Плетение косичек 'Викинг'",
            "Массаж головы 'Озарение'",
        ],
        "master_id": 5,
        "date": "2025-03-28",
        "status": STATUS_COMPLETED,
    },
]


======================================================================
File: forms.py
Path: C:\python\django\HomeWorcks\Barbershop\core\forms.py
======================================================================


from django import forms
from .models import Review, Master, Service
from django.core.validators import MinValueValidator, MaxValueValidator


class ServiceForm(forms.ModelForm):
    class Meta:
        model = Service
        fields = ['name', 'description', 'price', 'duration', 'is_popular', 'image']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }



class ReviewForm(forms.ModelForm):
    rating = forms.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        widget=forms.HiddenInput(),
        required=True
    )
    
    class Meta:
        model = Review
        fields = ['client_name', 'text', 'rating', 'master', 'photo']
        widgets = {
            'client_name': forms.TextInput(attrs={
                'class': 'form-control quantum-input',
                'placeholder': 'Ваше имя'
            }),
            'text': forms.Textarea(attrs={
                'class': 'form-control quantum-input',
                'placeholder': 'Ваш отзыв...',
                'rows': 4
            }),
            'master': forms.Select(attrs={
                'class': 'form-select quantum-select',
                'id': 'id_master'
            }),
            'photo': forms.FileInput(attrs={
                'class': 'form-control quantum-file-input'
            })
        }
        labels = {
            'client_name': 'Имя клиента',
            'text': 'Текст отзыва',
            'master': 'Мастер',
            'photo': 'Фото (необязательно)'
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['master'].queryset = Master.objects.filter(is_active=True)


======================================================================
File: models.py
Path: C:\python\django\HomeWorcks\Barbershop\core\models.py
======================================================================

from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models


class Order(models.Model):
    """Модель заказа."""

    STATUS_CHOICES = [
        ("not_approved", "Не подтвержден"),
        ("moderated", "Прошел модерацию"),
        ("spam", "Спам"),
        ("approved", "Подтвержден"),
        ("in_awaiting", "В ожидании"),
        ("completed", "Завершен"),
        ("canceled", "Отменен"),
    ]

    client_name = models.CharField(max_length=100, verbose_name="Имя клиента")
    phone = models.CharField(max_length=20, verbose_name="Телефон")
    comment = models.TextField(verbose_name="Комментарий", blank=True)
    status = models.CharField(max_length=50, verbose_name="Статус", choices=STATUS_CHOICES, default="not_approved")
    date_created = models.DateTimeField(auto_now_add=True, verbose_name="Дата создания", db_index=True)
    date_updated = models.DateTimeField(auto_now=True, verbose_name="Дата обновления")
    master = models.ForeignKey("Master", on_delete=models.SET_NULL,null=True, blank=True, verbose_name="Мастер")
    services = models.ManyToManyField("Service", verbose_name="Услуги", related_name='orders')
    appointment_date = models.DateTimeField(verbose_name="Дата и время записи")

    def __str__(self):
        return f"Заказ №{self.id} от {self.client_name}"
    
    class Meta:
        verbose_name = "Заказ"
        verbose_name_plural = "Заказы"
        ordering = ["-date_created"]
        indexes = [
            # Одиночные  Индексы по имени клиента, номеру телефона и комментарию
            models.Index(fields=["client_name"], name="order_client_name_idx"),
            models.Index(fields=["phone"], name="phone_idx"),
            models.Index(fields=["comment"], name="comment_idx"),
            # Составной индекс по имени клиента и номеру телефона
            models.Index(fields=["client_name", "phone"], name="client_name_phone_idx"),
            # Составной индекс по имени клиента и комментарию
            models.Index(fields=["client_name", "comment"], name="client_name_comment_idx"),
        ]


class Master(models.Model):
    """Модель мастера."""

    first_name = models.CharField(max_length=100, db_index=True)
    last_name = models.CharField(max_length=100)
    photo = models.ImageField(upload_to="images/masters/", blank=True, null=True)
    phone = models.CharField(max_length=20, verbose_name="Телефон")
    address = models.CharField(max_length=255, verbose_name="Адрес")
    experience = models.PositiveBigIntegerField(verbose_name="Стаж", help_text="Опыт работы в годах")
    services = models.ManyToManyField("Service", verbose_name="Услуги", related_name="masters")
    is_active = models.BooleanField(default=True, verbose_name="Активен")

    def __str__(self):
        return f"{self.first_name} {self.last_name}"
    
    class Meta:
        verbose_name = "Мастер"
        verbose_name_plural = "Мастера"
        ordering = ["first_name", "last_name"]
        indexes = [
            # Индек по имени
            models.Index(fields=["first_name"], name="first_name_idx"),
        ]


class Service(models.Model):
    """Модель услуги."""

    name = models.CharField(max_length=200, verbose_name="Название")
    description = models.TextField(verbose_name="Описание", blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="Цена")
    duration = models.PositiveIntegerField(verbose_name="Длительность", help_text="Время выполнения в минутах")
    is_popular = models.BooleanField(default=False, verbose_name="Популярная услуга")
    image = models.ImageField(upload_to="images/services/", blank=True, null=True, verbose_name="Изображение услуги")

    def __str__(self):
        return f'{self.name} - {self.price} руб.'
    
    class Meta:
        verbose_name = "Услуга"
        verbose_name_plural = "Услуги"
        ordering = ["name"]
        indexes = [
            # Индекс по названию
            models.Index(fields=["name"], name="name_idx"),            
        ]


class Review(models.Model):
    """Модель отзыва."""

    text = models.TextField(verbose_name="Текст отзыва")
    client_name = models.CharField(max_length=100, verbose_name="Имя клиента", blank=True)
    master = models.ForeignKey("Master", on_delete=models.CASCADE, verbose_name="Мастер")
    photo = models.ImageField(upload_to="images/reviews/", blank=True, null=True, verbose_name="Фото")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Дата создания")
    rating = models.PositiveSmallIntegerField(default=5,
            validators=[
                MinValueValidator(1, message="Рейтинг не может быть меньше 1."),
                MaxValueValidator(5, message="Рейтинг не может быть больше 5.")
            ],
            help_text="Рейтинг от 1 до 5", verbose_name="Оценка")
    is_published = models.BooleanField(default=False, verbose_name="Опубликован")


    def __str__(self):
        return f"Отзыв от {self.client_name} на {self.master}"


    class Meta:
        verbose_name = "Отзыв"
        verbose_name_plural = "Отзывы"
        ordering = ["-created_at"]
        indexes = [
            # Индекс по имени клиента
            models.Index(fields=["client_name"], name="review_client_name_idx"),
        ]


======================================================================
File: tests.py
Path: C:\python\django\HomeWorcks\Barbershop\core\tests.py
======================================================================

from django.test import TestCase

# Create your tests here.


======================================================================
File: urls.py
Path: C:\python\django\HomeWorcks\Barbershop\core\urls.py
======================================================================

from django.contrib import admin
from django.urls import path
from django.views import View
import core.views as views

urlpatterns = [
    path('thanks/', views.thanks, name='thanks'),
    path('orders/', views.orders_list, name='orders_list'),
    path('orders/<int:order_id>/', views.order_detail,name='order_detail'),
    path("service_create/", views.service_create, name="service_create"),
    path('review/create/', views.create_review, name='create_review'),
    path('api/master-info/', views.get_master_info, name='get_master_info'),
]


======================================================================
File: views.py
Path: C:\python\django\HomeWorcks\Barbershop\core\views.py
======================================================================

from django.http import HttpResponse, JsonResponse
from django.shortcuts import render
from django.urls import reverse
from django.contrib.admin.views.decorators import staff_member_required
from .models import *
from django.shortcuts import get_object_or_404, redirect
from django.db.models import Q
from .forms import *
from django.contrib import messages


def landing(request):
    context = {
        "title_masters": "Наши мастера",
        "masters": Master.objects.prefetch_related('services').filter(is_active=True),
        "title_services": "Наши услуги",
        "services": Service.objects.all(),
        "reviews": Review.objects.filter(is_published=True).select_related('master')[:6]
    }
    return render(request, "core/landing.html", context)


def thanks(request):
    context = {
        'countdown_seconds': 15,  # Время отсчета
        'redirect_url': reverse('landing')
    }
    return render(request, "core/thanks.html", context)


@staff_member_required
def orders_list(request):
    # Базовая выборка с оптимизацией запросов
    orders = Order.objects.select_related('master').prefetch_related('services').all()
    
    # Обработка поискового запроса
    search_query = request.GET.get('q', '')
    if search_query:
        # Получаем выбранные поля для поиска
        search_fields = request.GET.getlist('search_in', ['name'])  # По умолчанию имя
        
        # Строим Q-объекты
        filters = Q()
        
        if 'name' in search_fields:
            filters |= Q(client_name__icontains=search_query)
            
        if 'phone' in search_fields:
            filters |= Q(phone__icontains=search_query)
            
        if 'comment' in search_fields:
            filters |= Q(comment__icontains=search_query)

        # Применяем фильтры только если есть выбранные поля
        if filters:
            orders = orders.filter(filters)

    # Сортировка и формирование контекста
    context = {
        'title': 'КВАНТОВЫЙ ТРЕКЕР ЗАКАЗОВ',
        'orders': orders.order_by('-date_created'),
    }
    
    return render(request, "core/orders_list.html", context)


@staff_member_required
def order_detail(request, order_id):
    order = get_object_or_404(Order, id=order_id)

    context = {
        "order": order,
    }

    return render(request, "core/order_detail.html", context)


@staff_member_required
def service_create(request):

    if request.method == "GET":
        form = ServiceForm()
        context = {
        'title': 'Создание квантовой услуги',
        'form': form,
    }

        return render(request, 'core/service_create.html', context)

    if request.method == 'POST':
        form = ServiceForm(request.POST, request.FILES)
        if form.is_valid():
            try:
                form.save()
                messages.success(request, f'Услуга {form.cleaned_data["name"]} успешно создана!')
                return redirect("landing")
            except ValidationError as e:
                form.add_error(None, e)
    
        context = {
            'title': 'Создание квантовой услуги',
            'form': form,
        }
        
        return render(request, 'core/service_create.html', context)
    
    
def create_review(request):
    if request.method == 'POST':
        form = ReviewForm(request.POST, request.FILES)
        if form.is_valid():
            review = form.save(commit=False)
            review.is_published = False  # Отзыв не публикуется сразу
            review.save()
            return redirect('thanks')
    else:
        form = ReviewForm()
    
    context = {
        'title': 'Квантовый отзыв',
        'form': form
    }
    return render(request, 'core/review_form.html', context)


def get_master_info(request):
    """AJAX-представление для получения информации о мастере"""
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        master_id = request.GET.get('master_id')
        if master_id:
            try:
                master = Master.objects.get(pk=master_id)
                master_data = {
                    'id': master.id,
                    'name': f"{master.first_name} {master.last_name}",
                    'experience': master.experience,
                    'photo': master.photo.url if master.photo else None,
                    'services': [{'name': service.name} for service in master.services.all()],
                }
                return JsonResponse({'success': True, 'master': master_data})
            except Master.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'Мастер не найден'})
        return JsonResponse({'success': False, 'error': 'Не указан ID мастера'})
    return JsonResponse({'success': False, 'error': 'Недопустимый запрос'})


======================================================================
File: __init__.py
Path: C:\python\django\HomeWorcks\Barbershop\core\__init__.py
======================================================================



======================================================================
File: 0001_initial.py
Path: C:\python\django\HomeWorcks\Barbershop\core\migrations\0001_initial.py
======================================================================

# Generated by Django 5.1.7 on 2025-04-27 13:52

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(db_index=True, max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='images/masters/')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('experience', models.PositiveBigIntegerField(help_text='Опыт работы в годах', verbose_name='Стаж')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
            ],
            options={
                'verbose_name': 'Мастер',
                'verbose_name_plural': 'Мастера',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('duration', models.PositiveIntegerField(help_text='Время выполнения в минутах', verbose_name='Длительность')),
                ('is_popular', models.BooleanField(default=False, verbose_name='Популярная услуга')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/services/', verbose_name='Изображение услуги')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст отзыва')),
                ('client_name', models.CharField(blank=True, max_length=100, verbose_name='Имя клиента')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='images/reviews/', verbose_name='Фото')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('rating', models.PositiveSmallIntegerField(default=5, help_text='Рейтинг от 1 до 5', validators=[django.core.validators.MinValueValidator(1, message='Рейтинг не может быть меньше 1.'), django.core.validators.MaxValueValidator(5, message='Рейтинг не может быть больше 5.')], verbose_name='Оценка')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликован')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.master', verbose_name='Мастер')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=100, verbose_name='Имя клиента')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('status', models.CharField(choices=[('not_approved', 'Не подтвержден'), ('moderated', 'Прошел модерацию'), ('spam', 'Спам'), ('approved', 'Подтвержден'), ('in_awaiting', 'В ожидании'), ('completed', 'Завершен'), ('canceled', 'Отменен')], default='not_approved', max_length=50, verbose_name='Статус')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата создания')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('appointment_date', models.DateTimeField(verbose_name='Дата и время записи')),
                ('master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.master', verbose_name='Мастер')),
                ('services', models.ManyToManyField(related_name='orders', to='core.service', verbose_name='Услуги')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-date_created'],
            },
        ),
        migrations.AddField(
            model_name='master',
            name='services',
            field=models.ManyToManyField(related_name='masters', to='core.service', verbose_name='Услуги'),
        ),
    ]


======================================================================
File: 0002_master_first_name_idx_order_order_client_name_idx_and_more.py
Path: C:\python\django\HomeWorcks\Barbershop\core\migrations\0002_master_first_name_idx_order_order_client_name_idx_and_more.py
======================================================================

# Generated by Django 5.1.7 on 2025-06-02 08:49

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AddIndex(
            model_name='master',
            index=models.Index(fields=['first_name'], name='first_name_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['client_name'], name='order_client_name_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['phone'], name='phone_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['comment'], name='comment_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['client_name', 'phone'], name='client_name_phone_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['client_name', 'comment'], name='client_name_comment_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['client_name'], name='review_client_name_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['name'], name='name_idx'),
        ),
    ]


======================================================================
File: __init__.py
Path: C:\python\django\HomeWorcks\Barbershop\core\migrations\__init__.py
======================================================================



======================================================================
File: landing.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\landing.html
======================================================================

{% extends "base.html" %}
{% load static %}

{% block content %}
<!-- Секция "О нас" -->
<section id="about">
    <div class="row align-items-center">
        <div class="container py-5">
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <h2 class="glow-text mb-4">
                        <i class="fas fa-atom quantum-icon"></i> 
                        КВАНТОВАЯ РЕВОЛЮЦИЯ В БАРБЕРШОПЕ
                    </h2>
                    <div class="quantum-about-card p-4">
                        <p class="quantum-text">Мы — <span class="text-quantum">Quantum Razor</span>, где технологии встречаются с традиционным мастерством.</p>
                        
                        <ul class="quantum-features">
                            <li><i class="fas fa-microchip quantum-feature-icon"></i> Нейросетевые алгоритмы подбора стиля</li>
                            <li><i class="fas fa-clock quantum-feature-icon"></i> Точность до миллиметра и секунды</li>
                            <li><i class="fas fa-flask quantum-feature-icon"></i> Квантовые технологии ухода</li>
                        </ul>
                        
                        <div class="quantum-signature mt-4">
                            <p class="mb-1">— Команда <span class="text-quantum">Quantum Razor</span></p>
                            <div class="quantum-signature-line"></div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="quantum-hologram-effect">
                        <img src="{% static 'images/barber-team.jpg' %}" alt="Наша команда" class="img-fluid rounded-3 quantum-hologram-img">
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Секция услуг в две колонки -->
<section id="services" class="my-5">
    <div class="container">
        <h2 class="glow-text text-center mb-4">{{ title_services }}</h2>
        <div class="row row-cols-1 row-cols-md-2 g-4">
            {% for service in services %}
            <div class="col quantum-animate">
                <div class="quantum-order-card h-100 p-3">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-wrench quantum-icon me-3 fs-4"></i>
                        <div>
                            <h5 class="glow-text mb-1">{{ service.name }}</h5>
                            <p class="mb-0 text-quantum">{{ service.price }} руб.</p>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</section>

<!-- Инклюд блока мастеров -->
<section id="masters" class="my-5">
    <div class="container">
        <h2 class="glow-text text-center mb-4">{{ title_masters }}</h2>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            {% include "core/includes/masters_cards_include.html" %}
        </div>
    </div>
</section>

<!-- Инклюд блока отзывов -->
<section id="reviews" class="my-5">
    <div class="container">
        <h2 class="glow-text text-center mb-4">Квантовые отзывы</h2>
        <div class="row g-4">
            {% include "core/includes/reviews_cards_include.html" %}
        </div>
    </div>
</section>

<!-- Секция записи -->
<section id="booking">
    <div class="quantum-booking-cta">
        <div class="container text-center py-4">
            <div class="d-flex flex-column flex-md-row justify-content-center align-items-center">
                <h3 class="glow-text mb-3 mb-md-0 me-md-4">
                    <i class="fas fa-calendar-alt quantum-icon me-2"></i>
                    ГОТОВЫ К КВАНТОВОМУ ПРЕОБРАЖЕНИЮ?
                </h3>
                <a href="{% url 'thanks' %}" class="btn btn-quantum-pulse">
                    ЗАПИСАТЬСЯ СЕЙЧАС
                </a>
            </div>
        </div>
    </div>
</section>
{% endblock content %}

======================================================================
File: orders_list.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\orders_list.html
======================================================================

{% extends "base.html" %}
{% load static %}

{% block content %}
<div class="container quantum-orders">
    <!-- Крутой техно-заголовок -->
    <div class="text-center mb-5">
        <h1 class="glow-text quantum-title">
            <i class="fas fa-clipboard-list quantum-icon"></i>
            {{ title }}
        </h1>
        <div class="quantum-badge">
            <span class="badge bg-quantum">АКТИВНЫХ МИССИЙ: {{orders|length}}</span>
        </div>
    </div>

    <!-- Поисковая форма -->
    <div class="quantum-search-card mb-4 p-4">
        <form method="GET" class="row g-3 align-items-center">
            <div class="col-md-4">
                <div class="form-check quantum-checkbox">
                    <input class="form-check-input" 
                        type="checkbox" 
                        name="search_in" 
                        value="name" 
                        id="search_name" 
                        {% if 'name' in request.GET.search_in or not request.GET %}checked{% endif %}>
                    <label class="form-check-label glow-text" for="search_name">
                        <i class="fas fa-user quantum-icon me-2"></i>По имени
                    </label>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-check quantum-checkbox">
                    <input class="form-check-input" 
                        type="checkbox" 
                        name="search_in" 
                        value="phone" 
                        id="search_phone"
                        {% if 'phone' in request.GET.search_in %}checked{% endif %}>
                    <label class="form-check-label glow-text" for="search_phone">
                        <i class="fas fa-phone quantum-icon me-2"></i>По телефону
                    </label>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-check quantum-checkbox">
                    <input class="form-check-input" 
                        type="checkbox" 
                        name="search_in" 
                        value="comment" 
                        id="search_comment"
                        {% if 'comment' in request.GET.search_in %}checked{% endif %}>
                    <label class="form-check-label glow-text" for="search_comment">
                        <i class="fas fa-comment quantum-icon me-2"></i>По комментарию
                    </label>
                </div>
            </div>
            <div class="col-12">
                <div class="input-group">
                    <input type="text" 
                        class="form-control quantum-search-input" 
                        name="q" 
                        placeholder="Квантовый поиск..." 
                        value="{{ request.GET.q }}">
                    <button type="submit" class="btn btn-quantum-pulse">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Три колонки заказов -->
    <div class="row row-cols-1 row-cols-md-3 g-4">
        {% for order in orders %}
        <div class="col">
            {% include "core/includes/order_card_include.html" %}            
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

======================================================================
File: order_detail.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\order_detail.html
======================================================================

{% extends "base.html" %}
{% load static %}

{% block content %}
<!-- Детали заказа -->
{% include "core/includes/order_card_include.html" %}
{% endblock %}

======================================================================
File: review_form.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\review_form.html
======================================================================

{% extends "base.html" %}
{% load static %}

{% block content %}
<section class="quantum-main">
    <div class="container py-5">
        <div class="quantum-about-card p-4 mx-auto" style="max-width: 700px;">
            <h2 class="glow-text text-center mb-4">
                <i class="fas fa-comment quantum-icon"></i>
                {{ title }}
            </h2>
            
            <form method="POST" enctype="multipart/form-data" class="quantum-form" id="review-form">
                {% csrf_token %}
                
                <!-- Поле имени -->
                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-user me-2"></i>Ваше имя
                    </label>
                    {{ form.client_name }}
                </div>

                <!-- Выбор мастера -->
                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-user-cog me-2"></i>Выберите мастера
                    </label>
                    {{ form.master }}
                    <div id="master-info" class="mt-3"></div>
                </div>

                <!-- Текст отзыва -->
                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-align-left me-2"></i>Текст отзыва
                    </label>
                    {{ form.text }}
                </div>

                <!-- Рейтинг (звездочки) -->
                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-star me-2"></i>Оценка
                    </label>
                    <div class="star-rating">
                        {% for i in "12345" %}
                            <i class="bi bi-star" data-rating="{{ i }}"></i>
                        {% endfor %}
                    </div>
                    {{ form.rating }}
                </div>

                <!-- Фото -->
                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-camera me-2"></i>Фото (необязательно)
                    </label>
                    {{ form.photo }}
                </div>

                <div class="text-center mt-5">
                    <button type="submit" class="btn btn-quantum-pulse px-5">
                        <i class="fas fa-paper-plane me-2"></i>Отправить в квантовое пространство
                    </button>
                </div>
            </form>
        </div>
    </div>
</section>
{% endblock content %}

{% block extra_js %}
<script src="{% static 'js/reviews.js' %}"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
{% endblock extra_js %}

======================================================================
File: service_create.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\service_create.html
======================================================================

{% extends "base.html" %}
{% load static %}

{% block content %}
<section class="quantum-main">
    <div class="container py-5">
        <div class="quantum-about-card p-4 mx-auto" style="max-width: 700px;">
            <h2 class="glow-text text-center mb-4">
                <i class="fas fa-plus-circle quantum-icon"></i>
                {{ title }}
            </h2>
            
            <form method="POST" enctype="multipart/form-data" class="quantum-form">
                {% csrf_token %}
                
                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-tag me-2"></i>Название услуги
                    </label>
                    {{ form.name }}
                </div>

                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-align-left me-2"></i>Описание
                    </label>
                    {{ form.description }}
                </div>

                <div class="row g-3 mb-4">
                    <div class="col-md-6">
                        <label class="glow-text quantum-label">
                            <i class="fas fa-ruble-sign me-2"></i>Цена
                        </label>
                        {{ form.price }}
                    </div>
                    <div class="col-md-6">
                        <label class="glow-text quantum-label">
                            <i class="fas fa-clock me-2"></i>Длительность (мин)
                        </label>
                        {{ form.duration }}
                    </div>
                </div>

                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-star me-2"></i>Популярная услуга
                    </label>
                    <div class="quantum-checkbox">
                        {{ form.is_popular }}
                        <label class="form-check-label glow-text" for="{{ form.is_popular.id_for_label }}">
                            Сделать популярной
                        </label>
                    </div>
                </div>

                <div class="mb-4">
                    <label class="glow-text quantum-label">
                        <i class="fas fa-image me-2"></i>Изображение услуги
                    </label>
                    {{ form.image }}
                </div>

                <div class="text-center mt-5">
                    <button type="submit" class="btn btn-quantum-pulse px-5">
                        <i class="fas fa-atom me-2"></i>Создать квантовую услугу
                    </button>
                </div>
            </form>
        </div>
    </div>
</section>
{% endblock content %}

======================================================================
File: thanks.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\thanks.html
======================================================================

{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container text-center quantum-thanks">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Крутой техно-иконка -->
            <div class="quantum-icon-success mb-4">
                <i class="fas fa-atom fa-spin"></i>
                <i class="fas fa-check quantum-check"></i>
            </div>
            
            <h1 class="glow-text mb-4">КВАНТОВАЯ БЛАГОДАРНОСТЬ!</h1>
            
            <div class="quantum-message-box p-4 mb-4">
                <p class="lead">Ваш заказ успешно прошел через <span class="text-quantum">пространственно-временной портал</span> и достиг нашей квантовой матрицы!</p>
                
                <p>Наш <span class="text-quantum">нейросетевой барбер</span> уже готовится к вашему визиту.</p>
            </div>
            
            <div class="quantum-note mt-4">
                <p class="small">* Прибытие в точку пространства-времени "Quantum Razor" рекомендовано за 5 минут до назначенного срока</p>
            </div>
            <!-- Таймер -->
            
            <div id="countdown-data" 
            data-seconds="{{ countdown_seconds }}"
            data-redirect-url="{{ redirect_url }}"
            style="display: none;"></div>

            <div class="quantum-timer">
                <div class="quantum-timer-text">
                    <span class="glow-text">АВТОМАТИЧЕСКИЙ ПЕРЕХОД В МАТЕРИНСКУЮ МАТРИЦУ ЧЕРЕЗ</span>
                    <div class="quantum-time" id="countdown"></div>
                    <span class="quantum-time-unit">КВАНТОВЫХ СЕКУНД</span>
                </div>
            </div>

            <a href="{% url 'landing' %}" class="btn btn-quantum mt-4">
                <i class="fas fa-arrow-left me-2"></i> Вернуться в материнскую матрицу
            </a>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{% static 'js/quantum_countdown.js' %}"></script>
{% endblock %}

======================================================================
File: masters_cards_include.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\includes\masters_cards_include.html
======================================================================

<!-- Карточки мастеров -->
{% load static %}
{% for master in masters %}
<div class="col">
    <div class="quantum-order-card p-3 h-100">
        <div class="quantum-card-header p-2 mb-3">
            <h4 class="glow-text mb-0 text-truncate">
                <i class="fas fa-user-astronaut quantum-icon"></i>
                {{ master.first_name }} {{ master.last_name }}
            </h4>
        </div>
        
        <div class="quantum-card-body">
            <div class="quantum-hologram-effect mb-3">
                {% if master.photo %}
                    <img src="{{ master.photo.url }}" 
                        class="img-fluid w-100 quantum-hologram-img"
                        style="height: 200px; object-fit: cover;"
                        alt="{{ master.first_name }} {{ master.last_name }}">
                {% else %}
                    <img src="{% static 'images/favicon.webp' %}" 
                        class="img-fluid w-100 quantum-hologram-img"
                        style="height: 200px; object-fit: cover;"
                        alt="Нет фото">
                {% endif %}
            </div>
            
            <ul class="quantum-list-group">
                <li class="quantum-list-item d-flex justify-content-between">
                    <span>Стаж:</span>
                    <span class="text-quantum">{{ master.experience }} лет</span>
                </li>
                <li class="quantum-list-item">
                    <div class="quantum-services flex-wrap">
                        {% for service in master.services.all %}
                        <span class="badge quantum-service-badge text-truncate m-1">
                            {{ service.name }}
                        </span>
                        {% endfor %}
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>
{% endfor %}

======================================================================
File: order_card_include.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\includes\order_card_include.html
======================================================================

<div class="card h-100 quantum-order-card">
    <div class="card-header quantum-card-header">
        <h5 class="card-title text-center glow-text">
            <i class="fas fa-user-astronaut me-2"></i>Миссия #{{order.id}}
        </h5>
    </div>
    <div class="card-body">
        <ul class="list-group list-group-flush quantum-list-group">
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-user-tag me-2"></i>Клиент: {{ order.client_name }}
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-phone me-2"></i>Телефон: {{ order.phone }}
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-comment me-2"></i>Комментарий: {{ order.comment|default:"—" }}
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-calendar-plus me-2"></i>Дата создания: {{ order.date_created|date:"d.m.Y H:i" }}
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-calendar-check me-2"></i>Дата записи: {{ order.appointment_date|date:"d.m.Y H:i" }}
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-user-cog me-2"></i>Мастер: 
                {% if order.master %}{{ order.master }}{% else %}—{% endif %}
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-power-off me-2"></i>Статус: 
                <span class="quantum-status-{{ order.status|lower }}">
                    {{ order.get_status_display }}
                </span>
            </li>
            <li class="list-group-item quantum-list-item">
                <i class="fas fa-rocket me-2"></i>Услуги:
                <div class="quantum-services">
                    {% for service in order.services.all %}
                        <span class="badge quantum-service-badge">{{ service.name }}</span>
                    {% endfor %}
                </div>
            </li>
        </ul>
    </div>
    <div class="card-footer quantum-card-footer">
        {% comment %}
        простой вариант оставил на будущее для справки
        {% if request.resolver_match.url_name == 'orders_list' %}
        <a href="{% url 'order_detail' order.id %}" class="btn btn-quantum w-100">
            <i class="fas fa-binoculars me-2"></i>Детали миссии
        </a> 
        {% else %}
        <a href="{% url 'orders_list' %}" class="btn btn-quantum w-100">
        <i class="fas fa-binoculars me-2"></i>К списку миссий
        </a> 
        {% endif %} {% endcomment %}
        <a href=" {% if request.resolver_match.url_name == 'orders_list' %} {% url 'order_detail' order.id %} {% else %} {% url 'orders_list' %} {% endif %}" class="btn btn-quantum w-100">
            <i class="fas fa-binoculars me-2"></i>{% if request.resolver_match.url_name == 'orders_list'  %}Детали миссии {% else %}К списку миссий {% endif %} 
        </a> 
    </div>
</div>

======================================================================
File: reviews_cards_include.html
Path: C:\python\django\HomeWorcks\Barbershop\core\templates\core\includes\reviews_cards_include.html
======================================================================

<!-- Карточки отзывов -->
{% for review in reviews %}
<div class="col-md-6 col-lg-4 quantum-animate">
    <div class="quantum-order-card p-3 mb-4">
        <!-- Заголовок с рейтингом -->
        <div class="quantum-card-header p-2 mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="glow-text mb-0">
                    <i class="fas fa-user quantum-icon"></i>
                    {{ review.client_name|default:"Аноним" }}
                </h5>
                <div class="quantum-status-completed">
                    {% with "fa-star" as star %}
                    {% for i in "12345" %}
                    <i class="fas {{ star }} {% if forloop.counter <= review.rating %}text-warning{% else %}text-secondary{% endif %}"></i>
                    {% endfor %}
                    {% endwith %}
                </div>
            </div>
        </div>
        
        <!-- Тело отзыва -->
        <div class="quantum-card-body">
            <p class="mb-3">{{ review.text}}</p>
            
            <!-- Фото отзыва -->
            {% if review.photo %}
            <div class="quantum-hologram-effect">
                <img src="{{ review.photo.url }}" 
                    alt="Фото отзыва" 
                    class="img-fluid rounded-3 quantum-hologram-img">
            </div>
            {% endif %}
        </div>
        
        <!-- Подвал -->
        <div class="quantum-card-footer p-2 mt-3">
            <small class="text-quantum">
                <i class="fas fa-calendar quantum-icon"></i>
                {{ review.created_at|date:"d.m.Y" }}
            </small>
        </div>
    </div>
</div>
{% endfor %}

======================================================================
File: asgi.py
Path: C:\python\django\HomeWorcks\Barbershop\Quantum_Razor_barbershop\asgi.py
======================================================================

"""
ASGI config for Quantum_Razor_barbershop project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Quantum_Razor_barbershop.settings')

application = get_asgi_application()


======================================================================
File: settings.py
Path: C:\python\django\HomeWorcks\Barbershop\Quantum_Razor_barbershop\settings.py
======================================================================

"""
Django settings for Quantum_Razor_barbershop project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    "core",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Quantum_Razor_barbershop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Quantum_Razor_barbershop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'  # URL-префикс для медиафайлов
MEDIA_ROOT = BASE_DIR / 'media'  # Путь к папке с файлами на сервере

======================================================================
File: urls.py
Path: C:\python\django\HomeWorcks\Barbershop\Quantum_Razor_barbershop\urls.py
======================================================================

"""
URL configuration for Quantum_Razor_barbershop project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
import core.views as views
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls, name='admin'),
    path('', views.landing, name='landing'),
    path('barbershop/', include('core.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

======================================================================
File: wsgi.py
Path: C:\python\django\HomeWorcks\Barbershop\Quantum_Razor_barbershop\wsgi.py
======================================================================

"""
WSGI config for Quantum_Razor_barbershop project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Quantum_Razor_barbershop.settings')

application = get_wsgi_application()


======================================================================
File: __init__.py
Path: C:\python\django\HomeWorcks\Barbershop\Quantum_Razor_barbershop\__init__.py
======================================================================



======================================================================
File: quantum_style.css
Path: C:\python\django\HomeWorcks\Barbershop\static\CSS\quantum_style.css
======================================================================

/* Основные стили для технофентези */
:root {
    --quantum-primary: #0ff0fc;
    --quantum-secondary: #7b2dff;
    --quantum-dark: #0a0a1a;
    --quantum-light: #e0e0e0;
    --quantum-accent: #ff2d7b;
}

body {
    font-family: 'Roboto', sans-serif;
    background-color: var(--quantum-dark);
    color: var(--quantum-light);
    overflow-x: hidden;
    position: relative;
}

h1, h2, h3, h4, h5, h6 {
    font-family: 'Orbitron', sans-serif;
}

/* Навигационная панель */
.quantum-nav {
    background-color: rgba(10, 10, 26, 0.9);
    border-bottom: 1px solid var(--quantum-primary);
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
}

.navbar-brand {
    font-family: 'Orbitron', sans-serif;
    font-weight: 700;
    font-size: 1.5rem;
}

.quantum-logo-icon {
    color: var(--quantum-primary);
    margin-right: 10px;
}

.nav-link {
    font-family: 'Orbitron', sans-serif;
    font-weight: 400;
    margin: 0 10px;
    position: relative;
}

.nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: var(--quantum-primary);
    transition: width 0.3s;
}

.nav-link:hover::after {
    width: 100%;
}

/* Глючный эффект */
.glitch-effect {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        rgba(123, 45, 255, 0.05),
        rgba(0, 255, 255, 0.05)
    );
    z-index: -1;
    pointer-events: none;
    opacity: 0.5;
}

/* Свечение текста */
.glow-text {
    text-shadow: 0 0 5px var(--quantum-primary), 0 0 10px var(--quantum-primary);
}

/* Основное содержимое */
.quantum-main {
    min-height: 70vh;
    padding-top: 20px;
}

/* Стили для списков */
.quantum-list {
    list-style-type: none;
    padding-left: 0;
}

.quantum-list li {
    padding: 8px 0;
    border-bottom: 1px solid rgba(0, 255, 255, 0.1);
    font-family: 'Orbitron', sans-serif;
}

.quantum-list li:last-child {
    border-bottom: none;
}

/* Футер */
.quantum-footer {
    background-color: rgba(10, 10, 26, 0.9);
    border-top: 1px solid var(--quantum-secondary);
    box-shadow: 0 0 15px rgba(123, 45, 255, 0.3);
}

.quantum-hr {
    border-color: var(--quantum-primary);
    margin: 20px auto;
    opacity: 0.3;
}

.social-icon {
    color: var(--quantum-light);
    font-size: 1.5rem;
    margin: 0 10px;
    transition: all 0.3s;
}

.social-icon:hover {
    color: var(--quantum-primary);
    text-shadow: 0 0 10px var(--quantum-primary);
    transform: scale(1.2);
}

/* Адаптивность */
@media (max-width: 768px) {
    .quantum-nav {
        padding: 10px 0;
    }
    
    .navbar-brand {
        font-size: 1.2rem;
    }
}

/* Стили для страницы благодарности */
.quantum-thanks {
    padding: 80px 0;
    min-height: 70vh;
}

.quantum-icon-success {
    position: relative;
    font-size: 5rem;
    color: var(--quantum-primary);
    width: 120px;
    height: 120px;
    margin: 0 auto;
}

.quantum-check {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 3rem;
    color: var(--quantum-light);
}

.quantum-message-box {
    background: rgba(20, 20, 40, 0.7);
    border: 1px solid var(--quantum-primary);
    border-radius: 8px;
    box-shadow: 0 0 30px rgba(0, 255, 255, 0.2);
}

.quantum-note {
    color: var(--quantum-primary);
    opacity: 0.7;
}

.text-quantum {
    color: var(--quantum-primary);
    font-family: 'Orbitron', sans-serif;
}

/* Стили для страницы заказов (ИЗМЕНЕНО) */
.quantum-orders {
    padding: 2rem 0;
}

.quantum-title {
    font-family: 'Orbitron', sans-serif;
    text-transform: uppercase;
    letter-spacing: 2px;
    margin-bottom: 1rem;
}

.quantum-icon {
    color: var(--quantum-primary);
    margin-right: 15px;
}

.quantum-badge .badge {
    background: rgba(123, 45, 255, 0.2);
    color: var(--quantum-primary);
    border: 1px solid var(--quantum-secondary);
    font-family: 'Orbitron', sans-serif;
    font-size: 1rem;
    padding: 8px 15px;
    border-radius: 20px;
}

/* Стили карточек заказов (ОБЪЕДИНЕНО И ИСПРАВЛЕНО) */
.quantum-order-card {
    background: rgba(20, 20, 40, 0.7);
    border: 1px solid var(--quantum-primary);
    border-radius: 10px;
    height: 100%;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
}

.quantum-order-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 255, 255, 0.3);
    z-index: 10;
}

.quantum-card-header {
    background: rgba(10, 10, 30, 0.9);
    border-bottom: 1px solid var(--quantum-secondary);
}

.quantum-list-group {
    background: transparent;
}

.quantum-list-item {
    background: transparent;
    color: var(--quantum-light);
    border-color: rgba(0, 255, 255, 0.1);
}

.quantum-services {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-top: 8px;
}

.quantum-service-badge {
    background: rgba(0, 255, 255, 0.1);
    color: var(--quantum-light);
    font-weight: normal;
    border: 1px solid var(--quantum-primary);
}

/* Статусы (ДОБАВЛЕНЫ АНИМАЦИИ) */
.quantum-status-new,
.quantum-status-in_progress {
    display: inline-block; /* Важно для анимаций */
}

.quantum-status-new {
    color: var(--quantum-primary);
    animation: pulse-blue 2s infinite;
}

.quantum-status-in_progress {
    color: #7b2dff;
    animation: pulse-purple 1.5s infinite;
}

.quantum-status-completed {
    color: #0ff0fc;
}

.quantum-status-cancelled {
    color: #ff2d7b;
}

.quantum-card-footer {
    background: rgba(10, 10, 30, 0.9);
    border-top: 1px solid var(--quantum-secondary);
}

/* Ключевые кадры анимаций (НОВОЕ) */
@keyframes pulse-blue {
    0%, 100% { opacity: 0.8; text-shadow: 0 0 5px var(--quantum-primary); }
    50% { opacity: 1; text-shadow: 0 0 15px var(--quantum-primary); }
}

@keyframes pulse-purple {
    0%, 100% { opacity: 0.8; text-shadow: 0 0 5px var(--quantum-secondary); }
    50% { opacity: 1; text-shadow: 0 0 15px var(--quantum-secondary); }
}

/* Стили для блока "О нас" */
.quantum-about-section {
    background: linear-gradient(
        to right, 
        rgba(10, 10, 30, 0.9), 
        rgba(20, 20, 40, 0.7)
    );
    border-top: 1px solid var(--quantum-primary);
    border-bottom: 1px solid var(--quantum-secondary);
}

.quantum-about-card {
    background: rgba(15, 15, 35, 0.6);
    border: 1px solid var(--quantum-secondary);
    border-radius: 8px;
    box-shadow: 0 0 25px rgba(123, 45, 255, 0.2);
}

.quantum-features {
    list-style: none;
    padding-left: 0;
}

.quantum-features li {
    padding: 8px 0;
    position: relative;
    padding-left: 30px;
}

.quantum-feature-icon {
    color: var(--quantum-primary);
    position: absolute;
    left: 0;
    top: 10px;
}

.quantum-hologram-effect {
    position: relative;
    overflow: hidden;
}

.quantum-hologram-img {
    border: 2px solid var(--quantum-primary);
    box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
    filter: brightness(1.1) contrast(0.9);
    transition: transform 0.5s;
}

.quantum-hologram-img:hover {
    transform: scale(1.03);
}

.quantum-signature-line {
    width: 100px;
    height: 2px;
    background: linear-gradient(90deg, var(--quantum-primary), transparent);
}

/* Стили для блока записи */
.quantum-booking-cta {
    background: rgba(10, 10, 30, 0.8);
    border-top: 1px solid var(--quantum-primary);
    border-bottom: 1px solid var(--quantum-primary);
    margin-top: 2rem;
}

.btn-quantum-pulse {
    background: linear-gradient(45deg, var(--quantum-primary), var(--quantum-secondary));
    border: none;
    color: var(--quantum-dark);
    font-family: 'Orbitron', sans-serif;
    font-weight: bold;
    padding: 10px 25px;
    position: relative;
    overflow: hidden;
    animation: pulse-glow 2s infinite;
}

@keyframes pulse-glow {
    0% { box-shadow: 0 0 10px rgba(0, 255, 255, 0.5); }
    50% { box-shadow: 0 0 20px rgba(0, 255, 255, 0.8); }
    100% { box-shadow: 0 0 10px rgba(0, 255, 255, 0.5); }
}

.btn-quantum-pulse:hover {
    transform: translateY(-2px);
    animation: none;
    box-shadow: 0 5px 15px rgba(0, 255, 255, 0.6);
}

/* Стили для таймера */
.quantum-timer {
    margin: 2rem 0;
    padding: 1.5rem;
    border: 1px solid var(--quantum-primary);
    border-radius: 12px;
    background: rgba(15, 15, 35, 0.6);
}

.quantum-timer-text {
    font-family: 'Orbitron', sans-serif;
    text-transform: uppercase;
}

.quantum-time {
    font-size: 3.5rem;
    color: var(--quantum-primary);
    text-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
    margin: 0.5rem 0;
    animation: quantum-pulse 1s infinite;
}

.quantum-time-unit {
    color: var(--quantum-light);
    font-size: 0.9rem;
    letter-spacing: 2px;
}

@keyframes quantum-pulse {
    0% { transform: scale(1); opacity: 0.8; }
    50% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 0.8; }
}

/* Добавленные стили для карточек */
.quantum-card-body {
    padding: 15px;
    background: rgba(15, 15, 35, 0.6);
    border-radius: 8px;
}

/* Адаптация карточек для мобильных */
@media (max-width: 768px) {
    .quantum-order-card {
        margin-bottom: 20px;
    }
    
    .quantum-hologram-img {
        max-height: 250px;
    }
}

/* Стилизация рейтинга */
.text-warning {
    color: var(--quantum-primary) !important;
}

.text-secondary {
    color: var(--quantum-light) !important;
    opacity: 0.3;
}

/* Дополнение для круглых изображений */
.rounded-circle {
    border: 2px solid var(--quantum-primary);
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
}

/* Исправления для бейджей услуг */
.quantum-service-badge {
    max-width: 150px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: inline-block;
    transition: all 0.3s;
}

.quantum-service-badge:hover {
    white-space: normal;
    overflow: visible;
    z-index: 2;
}

/* Адаптация карточек услуг */
.quantum-order-card {
    min-height: 120px; /* Фиксированная высота для карточек услуг */
}

/* Стили для карточек услуг */
.quantum-service-card {
    background: linear-gradient(45deg, 
        rgba(15, 15, 35, 0.8), 
        rgba(25, 25, 55, 0.6)
    );
    border: 1px solid var(--quantum-primary);
    border-radius: 12px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.quantum-service-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 255, 255, 0.25);
}

.quantum-service-icon {
    font-size: 2.2rem;
    color: var(--quantum-primary);
    text-shadow: 0 0 15px rgba(0, 255, 255, 0.4);
    min-width: 50px;
}

.quantum-service-desc {
    color: var(--quantum-light);
    opacity: 0.85;
    font-size: 0.95rem;
    line-height: 1.5;
    word-break: break-word;
}

/* Исправления для бейджей услуг */
.quantum-service-badge {
    background: rgba(0, 255, 255, 0.1) !important;
    color: var(--quantum-light) !important;
    border: 1px solid var(--quantum-primary);
    border-radius: 20px;
    margin: 3px;
    padding: 8px 15px;
    white-space: normal;
    text-align: center;
    display: inline-block;
    max-width: 100%;
    transition: all 0.2s;
}

.quantum-service-badge:hover {
    transform: scale(1.05);
    background: rgba(0, 255, 255, 0.2) !important;
}

/* Стили для поисковой формы */
.quantum-search-card {
    background: rgba(20, 20, 40, 0.8);
    border: 1px solid var(--quantum-primary);
    border-radius: 12px;
    box-shadow: 0 0 25px rgba(0, 255, 255, 0.2);
}

.quantum-checkbox .form-check-input {
    background-color: var(--quantum-dark);
    border: 2px solid var(--quantum-primary);
}

.quantum-checkbox .form-check-input:checked {
    background-color: var(--quantum-primary);
    border-color: var(--quantum-primary);
}

/* Исправляем цвет текста в поле ввода */
.quantum-search-input {
    color: var(--quantum-primary) !important; /* Голубой цвет как в стиле */
    opacity: 0.9; /* Небольшая прозрачность */
}

/* Стиль для плейсхолдера */
.quantum-search-input::placeholder {
    color: var(--quantum-primary) !important;
    opacity: 0.5 !important; /* Полупрозрачный вариант */
}

/* Сохраняем цвет при фокусе */
.quantum-search-input:focus {
    color: var(--quantum-primary) !important;
    opacity: 1 !important;
}

/* Стили для формы создания услуги */
.quantum-form input:not([type="checkbox"]), 
.quantum-form textarea, 
.quantum-form select {
    background: rgba(15, 15, 35, 0.7) !important;
    border: 1px solid var(--quantum-primary) !important;
    color: var(--quantum-light) !important;
    padding: 12px;
    border-radius: 8px;
    width: 100%;
    transition: all 0.3s;
}

.quantum-form input:focus,
.quantum-form textarea:focus {
    background: rgba(25, 25, 55, 0.8) !important;
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.3) !important;
}

.quantum-label {
    font-family: 'Orbitron', sans-serif;
    margin-bottom: 8px;
    display: block;
}

.quantum-checkbox .form-check-input {
    width: 20px;
    height: 20px;
    margin-right: 10px;
}

.quantum-checkbox label {
    vertical-align: middle;
}

/* Стили для файлового инпута */
.quantum-form input[type="file"] {
    padding: 10px;
    border: 2px dashed var(--quantum-primary) !important;
}

.quantum-form input[type="file"]::file-selector-button {
    background: var(--quantum-primary);
    color: var(--quantum-dark);
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-family: 'Orbitron';
}

/* Стили для формы отзыва */
.quantum-form-container {
    max-width: 800px;
    margin: 0 auto;
}

.star-rating {
    font-size: 1.8rem;
    cursor: pointer;
    color: #444;
    margin-top: 5px;
}

.star-rating i {
    transition: all 0.3s;
    margin-right: 5px;
}

.star-rating i:hover {
    transform: scale(1.2);
}

.quantum-master-card {
    background: rgba(30, 30, 60, 0.7);
    border: 1px solid var(--quantum-primary);
    border-radius: 10px;
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.1);
}

.quantum-error {
    color: #ff2d7b;
    font-size: 0.9rem;
    margin-top: 5px;
}

.quantum-file-input::file-selector-button {
    background: var(--quantum-primary);
    color: var(--quantum-dark);
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-family: 'Orbitron';
    transition: all 0.3s;
}

.quantum-file-input::file-selector-button:hover {
    background: var(--quantum-secondary);
}


======================================================================
File: quantum_countdown.js
Path: C:\python\django\HomeWorcks\Barbershop\static\JS\quantum_countdown.js
======================================================================

document.addEventListener('DOMContentLoaded', function() {
    const countdownData = document.getElementById('countdown-data');
    if (!countdownData) return;

    let seconds = parseInt(countdownData.dataset.seconds) || 5;
    const redirectUrl = countdownData.dataset.redirectUrl || '/';
    const countdownElement = document.getElementById('countdown');

    function updateTimer() {
        if (seconds <= 1) {
            window.location.href = redirectUrl;
            return;
        }
        
        seconds--;
        countdownElement.textContent = seconds;
        
        // Сброс анимации для плавного пульса
        countdownElement.style.animation = 'none';
        void countdownElement.offsetWidth; // Принудительный рефлоу
        countdownElement.style.animation = 'quantum-pulse 1s infinite';
    }

    // Запускаем сразу первую итерацию
    updateTimer();
    const timerInterval = setInterval(updateTimer, 1000);
});

======================================================================
File: quantum_effects.js
Path: C:\python\django\HomeWorcks\Barbershop\static\JS\quantum_effects.js
======================================================================

document.addEventListener('DOMContentLoaded', function() {
    // Добавляем эффект глитча для элементов с классом glitch
    const glitchElements = document.querySelectorAll('.glitch');
    
    glitchElements.forEach(element => {
        element.addEventListener('mouseenter', function() {
            this.style.textShadow = '2px 2px 0 #ff2d7b, -2px -2px 0 #0ff0fc';
            this.style.position = 'relative';
            this.style.left = '2px';
        });
        
        element.addEventListener('mouseleave', function() {
            this.style.textShadow = '';
            this.style.position = '';
            this.style.left = '';
        });
    });
    
    // Эффект параллакса для фона
    // if (window.innerWidth > 768) {
    //     document.body.addEventListener('mousemove', function(e) {
    //         const x = e.clientX / window.innerWidth;
    //         const y = e.clientY / window.innerHeight;
            
    //         const glitchEffect = document.querySelector('.glitch-effect');
    //         glitchEffect.style.backgroundPosition = `${x * 30}px ${y * 30}px`;
    //     });
    // }
    
    // Анимация появления элементов при скролле
    const animateOnScroll = function() {
        const elements = document.querySelectorAll('.quantum-animate');
        
        elements.forEach(element => {
            const elementPosition = element.getBoundingClientRect().top;
            const windowHeight = window.innerHeight;
            
            if (elementPosition < windowHeight - 100) {
                element.classList.add('animated');
            }
        });
    };
    
    window.addEventListener('scroll', animateOnScroll);
    animateOnScroll(); // Запускаем сразу для видимых элементов
});

======================================================================
File: reviews.js
Path: C:\python\django\HomeWorcks\Barbershop\static\JS\reviews.js
======================================================================

// Функция для обновления звезд
function updateStars(rating) {
    document.querySelectorAll('.star-rating i').forEach(star => {
        const starValue = star.getAttribute('data-rating');
        if (starValue <= rating) {
            star.classList.remove('bi-star');
            star.classList.add('bi-star-fill', 'text-warning');
        } else {
            star.classList.remove('bi-star-fill', 'text-warning');
            star.classList.add('bi-star');
        }
    });
}

// Инициализация звездного рейтинга
document.addEventListener('DOMContentLoaded', function() {
    const starContainer = document.querySelector('.star-rating');
    const ratingInput = document.getElementById('id_rating');
    
    if (starContainer) {
        // Обработка клика по звезде
        starContainer.querySelectorAll('i').forEach(star => {
            star.addEventListener('click', function() {
                const rating = this.getAttribute('data-rating');
                ratingInput.value = rating;
                updateStars(rating);
            });
            
            // Эффект при наведении
            star.addEventListener('mouseenter', function() {
                const hoverRating = this.getAttribute('data-rating');
                updateStars(hoverRating);
            });
            
            star.addEventListener('mouseleave', function() {
                updateStars(ratingInput.value || 0);
            });
        });
        
        // Инициализация текущего значения
        if (ratingInput.value) {
            updateStars(ratingInput.value);
        }
    }
    
    // AJAX подгрузка информации о мастере
    const masterSelect = document.getElementById('id_master');
    if (masterSelect) {
        masterSelect.addEventListener('change', function() {
            const masterId = this.value;
            const infoDiv = document.getElementById('master-info');
            
            if (masterId) {
                fetch(`/api/master-info/?master_id=${masterId}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayMasterInfo(data.master);
                    } else {
                        infoDiv.innerHTML = `<div class="alert alert-quantum">${data.error}</div>`;
                    }
                })
                .catch(error => {
                    infoDiv.innerHTML = '<div class="alert alert-quantum">Ошибка загрузки данных</div>';
                });
            } else {
                infoDiv.innerHTML = '';
            }
        });
    }
    
    // Функция отображения информации о мастере
    function displayMasterInfo(master) {
        const infoDiv = document.getElementById('master-info');
        infoDiv.innerHTML = `
            <div class="quantum-master-card p-3">
                <div class="d-flex align-items-center">
                    ${master.photo ? `<img src="${master.photo}" class="rounded-circle me-3" width="80" height="80" alt="${master.name}">` : ''}
                    <div>
                        <h5 class="glow-text">${master.name}</h5>
                        <p class="mb-1"><i class="fas fa-award me-2"></i>Опыт: ${master.experience} лет</p>
                        ${master.services.length ? `<p class="mb-0"><i class="fas fa-scissors me-2"></i>Специализация: ${master.services.map(s => s.name).join(', ')}</p>` : ''}
                    </div>
                </div>
            </div>
        `;
    }
    
    // Клиентская валидация формы
    const reviewForm = document.getElementById('review-form');
    if (reviewForm) {
        reviewForm.addEventListener('submit', function(event) {
            if (!validateReviewForm()) {
                event.preventDefault();
            }
        });
    }
    
    function validateReviewForm() {
        let isValid = true;
        const fields = [
            { id: 'id_client_name', message: 'Пожалуйста, укажите ваше имя' },
            { id: 'id_text', message: 'Пожалуйста, напишите текст отзыва' },
            { id: 'id_master', message: 'Пожалуйста, выберите мастера' }
        ];
        
        // Проверка обязательных полей
        fields.forEach(field => {
            const element = document.getElementById(field.id);
            if (!element.value.trim()) {
                showError(element, field.message);
                isValid = false;
            } else {
                clearError(element);
            }
        });
        
        // Проверка рейтинга
        const ratingInput = document.getElementById('id_rating');
        if (!ratingInput.value) {
            showError(document.querySelector('.star-rating'), 'Пожалуйста, поставьте оценку');
            isValid = false;
        } else {
            clearError(document.querySelector('.star-rating'));
        }
        
        return isValid;
    }
    
    function showError(element, message) {
        clearError(element);
        element.classList.add('is-invalid');
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'invalid-feedback quantum-error';
        errorDiv.textContent = message;
        
        element.parentNode.appendChild(errorDiv);
    }
    
    function clearError(element) {
        element.classList.remove('is-invalid');
        const errorDiv = element.parentNode.querySelector('.invalid-feedback');
        if (errorDiv) {
            errorDiv.remove();
        }
    }
});


======================================================================
File: base.html
Path: C:\python\django\HomeWorcks\Barbershop\templates\base.html
======================================================================

{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Фавикон - маленькая, но гордая иконка нашего барбершопа -->
    <link rel="icon" type="image/webp" href="{% static 'images/favicon.webp' %}">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/quantum_style.css' %}">
    <!-- Font Awesome для иконок -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Технофентези шрифт -->
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400&display=swap" rel="stylesheet">
    <title>{{title |default:"Quantum Razor Barbershop"}} </title>

    {% block styles %} {% comment %} Дополнительные стили{% endcomment %} 
    {% endblock styles %} 
    {% block extra_head %} {% comment %} Дополнительные элементы в head {% endcomment %} 
    {% endblock extra_head %}
</head>

<body class="tech-fantasy-bg">  
    <div class="conteiner">
        <header>
            {% block header %}  {% include "includes/nav_menu_include.html" %} {% endblock header %}
        </header>

    <!-- Основное содержимое -->
    <main class="quantum-main">
        <div class="container py-5">
            {% block content %}
            <!-- Здесь будет основное содержимое страниц -->
            {% endblock content %}
        </div>
    </main>

    <!-- Футер -->
    <footer class="quantum-footer text-center py-4">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h5 class="glow-text">Quantum Razor</h5>
                    <p>Барбершоп нового поколения</p>
                </div>
                <div class="col-md-4" id="contacts">
                    <h5 class="glow-text">Контакты</h5>
                    <p><i class="fas fa-map-marker-alt"></i> Техноулица, 42</p>
                    <p><i class="fas fa-phone"></i> +7 (XXX) XXX-XX-XX</p>
                </div>
                <div class="col-md-4">
                    <h5 class="glow-text">Соцсети</h5>
                    <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-telegram"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-vk"></i></a>
                </div>
            </div>
            <hr class="quantum-hr">
            <p class="mb-0">&copy; 2025 Quantum Razor Barbershop. Все права защищены.</p>
        </div>
    </footer>
    </div>
    <!-- Bootstrap JS + Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script src="{% static 'js/quantum_effects.js' %}"></script>
    {% block extra_js %} {% comment %} Дополнительный js  {% endcomment %} {% endblock %} 
</body>
</html>

======================================================================
File: nav_menu_include.html
Path: C:\python\django\HomeWorcks\Barbershop\templates\includes\nav_menu_include.html
======================================================================

<!-- Навигационная панель -->
<nav class="navbar navbar-expand-lg navbar-dark quantum-nav">
    <div class="container">
        <a class="navbar-brand glow-text" href="/">
            <i class="fas fa-atom quantum-logo-icon"></i> Quantum Razor
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarQuantum">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarQuantum">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'landing' %}#about">О нас</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'landing' %}#services">Услуги</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'landing' %}#masters">Мастера</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'landing' %}#booking">Запись</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'create_review' %}">
                    <i class="fas fa-comment me-1"></i> Оставить отзыв
                    </a>
                </li>
                
                {% if user.is_staff %}
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'orders_list' %}">Список заказов</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'service_create' %}">Добавить услугу</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="{% url 'admin:index' %}">Админка</a>
                </li>

                {% endif %}
            </ul>
        </div>
    </div>
</nav>

======================================================================
Файлы с неподдерживаемыми расширениями:
======================================================================

File: .env.example
Path: C:\python\django\HomeWorcks\Barbershop\.env.example

File: Борис_Фен_Пастернак.webp
Path: C:\python\django\HomeWorcks\Barbershop\media\images\masters\Борис_Фен_Пастернак.webp

File: Зоя_Ножницы_Космодемьянская.webp
Path: C:\python\django\HomeWorcks\Barbershop\media\images\masters\Зоя_Ножницы_Космодемьянская.webp

File: Иннокентий_Лак_Смоктуновский.webp
Path: C:\python\django\HomeWorcks\Barbershop\media\images\masters\Иннокентий_Лак_Смоктуновский.webp

File: Раиса_Бигуди_Горбачёва.webp
Path: C:\python\django\HomeWorcks\Barbershop\media\images\masters\Раиса_Бигуди_Горбачёва.webp

File: Эльдар_Бритва_Рязанов.webp
Path: C:\python\django\HomeWorcks\Barbershop\media\images\masters\Эльдар_Бритва_Рязанов.webp

File: orig.webp
Path: C:\python\django\HomeWorcks\Barbershop\media\images\reviews\orig.webp

File: photo-1530435460869-d13625c69bbf_copy_1.png
Path: C:\python\django\HomeWorcks\Barbershop\media\images\services\photo-1530435460869-d13625c69bbf_copy_1.png

File: barber-team.jpg
Path: C:\python\django\HomeWorcks\Barbershop\static\images\barber-team.jpg

File: favicon.webp
Path: C:\python\django\HomeWorcks\Barbershop\static\images\favicon.webp

